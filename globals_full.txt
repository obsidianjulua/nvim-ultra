

<1>{
  _G = <table 1>,
  _VERSION = "Lua 5.1",
  arg = {},
  assert = <function 1>,
  bit = <2>{
    arshift = <function 2>,
    band = <function 3>,
    bnot = <function 4>,
    bor = <function 5>,
    bswap = <function 6>,
    bxor = <function 7>,
    lshift = <function 8>,
    rol = <function 9>,
    ror = <function 10>,
    rshift = <function 11>,
    tobit = <function 12>,
    tohex = <function 13>
  },
  collectgarbage = <function 14>,
  coroutine = <3>{
    create = <function 15>,
    isyieldable = <function 16>,
    resume = <function 17>,
    running = <function 18>,
    status = <function 19>,
    wrap = <function 20>,
    yield = <function 21>
  },
  debug = <4>{
    debug = <function 22>,
    getfenv = <function 23>,
    gethook = <function 24>,
    getinfo = <function 25>,
    getlocal = <function 26>,
    getmetatable = <function 27>,
    getregistry = <function 28>,
    getupvalue = <function 29>,
    setfenv = <function 30>,
    sethook = <function 31>,
    setlocal = <function 32>,
    setmetatable = <function 33>,
    setupvalue = <function 34>,
    traceback = <function 35>,
    upvalueid = <function 36>,
    upvaluejoin = <function 37>
  },
  dofile = <function 38>,
  error = <function 39>,
  gcinfo = <function 40>,
  getfenv = <function 41>,
  getmetatable = <function 42>,
  io = <5>{
    close = <function 43>,
    flush = <function 44>,
    input = <function 45>,
    lines = <function 46>,
    open = <function 47>,
    output = <function 48>,
    popen = <function 49>,
    read = <function 50>,
    stderr = <userdata 1>,
    stdin = <userdata 2>,
    stdout = <userdata 3>,
    tmpfile = <function 51>,
    type = <function 52>,
    write = <function 53>
  },
  ipairs = <function 54>,
  jit = <6>{
    arch = "x64",
    attach = <function 55>,
    flush = <function 56>,
    off = <function 57>,
    on = <function 58>,
    opt = <7>{
      start = <function 59>
    },
    os = "Linux",
    security = <function 60>,
    status = <function 61>,
    version = "LuaJIT 2.1.1748459687",
    version_num = 20199
  },
  load = <function 62>,
  loadfile = <function 63>,
  loadstring = <function 64>,
  lpeg = <8>{
    B = <function 65>,
    C = <function 66>,
    Carg = <function 67>,
    Cb = <function 68>,
    Cc = <function 69>,
    Cf = <function 70>,
    Cg = <function 71>,
    Cmt = <function 72>,
    Cp = <function 73>,
    Cs = <function 74>,
    Ct = <function 75>,
    P = <function 76>,
    R = <function 77>,
    S = <function 78>,
    V = <function 79>,
    locale = <function 80>,
    match = <function 81>,
    pcode = <function 82>,
    ptree = <function 83>,
    setmaxstack = <function 84>,
    type = <function 85>,
    utfR = <function 86>,
    version = "LPeg 1.1.0"
  },
  math = <9>{
    abs = <function 87>,
    acos = <function 88>,
    asin = <function 89>,
    atan = <function 90>,
    atan2 = <function 91>,
    ceil = <function 92>,
    cos = <function 93>,
    cosh = <function 94>,
    deg = <function 95>,
    exp = <function 96>,
    floor = <function 97>,
    fmod = <function 98>,
    frexp = <function 99>,
    huge = inf,
    ldexp = <function 100>,
    log = <function 101>,
    log10 = <function 102>,
    max = <function 103>,
    min = <function 104>,
    modf = <function 105>,
    pi = 3.1415926535898,
    pow = <function 106>,
    rad = <function 107>,
    random = <function 108>,
    randomseed = <function 109>,
    sin = <function 110>,
    sinh = <function 111>,
    sqrt = <function 112>,
    tan = <function 113>,
    tanh = <function 114>
  },
  module = <function 115>,
  newproxy = <function 116>,
  next = <function 117>,
  os = <10>{
    clock = <function 118>,
    date = <function 119>,
    difftime = <function 120>,
    execute = <function 121>,
    exit = <function 122>,
    getenv = <function 123>,
    remove = <function 124>,
    rename = <function 125>,
    setlocale = <function 126>,
    time = <function 127>,
    tmpname = <function 128>
  },
  package = <11>{
    config = "/\n;\n?\n!\n-\n",
    cpath = "./?.so;/usr/local/lib/lua/5.1/?.so;/usr/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so;/home/grim/.local/share/nvim/lazy-rocks/telescope.nvim/lib/lua/5.1/?.so;;/home/grim/.local/share/nvim/lazy-rocks/telescope.nvim/lib64/lua/5.1/?.so;",
    loaded = {
      _G = <table 1>,
      _copilot = {
        lsp_request = <function 129>,
        lsp_start_client = <function 130>,
        rpc_notify = <function 131>,
        rpc_request = <function 132>
      },
      bigui = {
        setup = <function 133>
      },
      bit = <table 2>,
      build = {
        build = <function 134>,
        clean = <function 135>,
        close_output = <function 136>,
        configure = <function 137>,
        repl = <function 138>,
        run = <function 139>,
        setup = <function 140>,
        test = <function 141>,
        toggle_output = <function 142>
      },
      cmp = {
        ConfirmBehavior = <12>{
          Insert = "insert",
          Replace = "replace"
        },
        ContextReason = <13>{
          Auto = "auto",
          Manual = "manual",
          None = "none",
          TriggerOnly = "triggerOnly"
        },
        ItemField = <14>{
          Abbr = "abbr",
          Kind = "kind",
          Menu = "menu"
        },
        PreselectMode = <15>{
          Item = "item",
          None = "none"
        },
        SelectBehavior = <16>{
          Insert = "insert",
          Select = "select"
        },
        TriggerEvent = <17>{
          InsertEnter = "InsertEnter",
          TextChanged = "TextChanged"
        },
        abort = <function 143>,
        close = <function 144>,
        close_docs = <function 145>,
        complete = <function 146>,
        complete_common_string = <function 147>,
        config = {
          compare = <18>{
            exact = <function 148>,
            kind = <function 149>,
            length = <function 150>,
            locality = <19>{
              lines_cache = {
                entries = {
                  buf = 1,
                  ["line:"] = {}
                },
                <metatable> = {
                  __index = <20>{
                    clear = <function 151>,
                    ensure = <function 152>,
                    get = <function 153>,
                    key = <function 154>,
                    new = <function 155>,
                    set = <function 156>
                  }
                }
              },
              lines_count = 10,
              locality_map = {},
              update = <function 157>,
              <metatable> = {
                __call = <function 158>
              }
            },
            offset = <function 159>,
            order = <function 160>,
            recently_used = <21>{
              add_entry = <function 161>,
              records = {},
              <metatable> = {
                __call = <function 162>
              }
            },
            scopes = {
              scopes_map = {},
              update = <function 163>,
              <metatable> = {
                __call = <function 164>
              }
            },
            score = <function 165>,
            sort_text = <function 166>
          },
          disable = vim.NIL,
          mapping = <22>{
            abort = <function 167>,
            close = <function 168>,
            close_docs = <function 169>,
            complete = <function 170>,
            complete_common_string = <function 171>,
            confirm = <function 172>,
            open_docs = <function 173>,
            preset = {
              cmdline = <function 174>,
              insert = <function 175>
            },
            scroll_docs = <function 176>,
            select_next_item = <function 177>,
            select_prev_item = <function 178>,
            <metatable> = {
              __call = <function 179>
            }
          },
          sources = <function 180>,
          window = <23>{
            bordered = <function 181>
          }
        },
        confirm = <function 182>,
        core = {
          context = {
            aborted = false,
            bufnr = -1,
            cache = {
              entries = {},
              <metatable> = {
                __index = <table 20>
              }
            },
            cursor = {
              col = -1,
              row = -1
            },
            cursor_after_line = "",
            cursor_before_line = "lua print(vim.inspect(_G))",
            cursor_line = "lua print(vim.inspect(_G))",
            filetype = "",
            id = 26,
            input = "",
            option = {},
            prev_context = {},
            time = 45513374,
            <metatable> = {
              __index = <24>{
                abort = <function 183>,
                changed = <function 184>,
                clone = <function 185>,
                empty = <function 186>,
                get_offset = <function 187>,
                get_reason = <function 188>,
                new = <function 189>
              }
            }
          },
          event = <25>{
            events = {
              complete_done = { <function 190> },
              confirm_done = { <function 191> }
            },
            <metatable> = {
              __index = <26>{
                clear = <function 192>,
                emit = <function 193>,
                new = <function 194>,
                off = <function 195>,
                on = <function 196>
              }
            }
          },
          sources = { {
              cache = {
                entries = {},
                <metatable> = {
                  __index = <table 20>
                }
              },
              complete_dedup = <function 197>,
              context = {
                aborted = false,
                bufnr = -1,
                cache = {
                  entries = {},
                  <metatable> = {
                    __index = <table 20>
                  }
                },
                cursor = {
                  col = -1,
                  row = -1
                },
                cursor_after_line = "",
                cursor_before_line = "lua print(vim.inspect(_G))",
                cursor_line = "lua print(vim.inspect(_G))",
                filetype = "",
                id = 22,
                input = "",
                option = {},
                prev_context = {},
                time = 45513374,
                <metatable> = {
                  __index = <table 24>
                }
              },
              entries = {},
              id = 1,
              incomplete = false,
              is_triggered_by_symbol = false,
              name = "luasnip",
              offset = -1,
              position_encoding = "utf-16",
              request_offset = -1,
              revision = 3,
              source = {
                <metatable> = {
                  __index = <27>{
                    clear_cache = <function 198>,
                    complete = <function 199>,
                    execute = <function 200>,
                    get_debug_name = <function 201>,
                    get_keyword_pattern = <function 202>,
                    is_available = <function 203>,
                    new = <function 204>,
                    refresh = <function 205>,
                    resolve = <function 206>
                  }
                }
              },
              status = 1,
              <metatable> = {
                __index = <28>{
                  SourceStatus = {
                    COMPLETED = 3,
                    FETCHING = 2,
                    WAITING = 1
                  },
                  _get_default_insert_range = <function 207>,
                  _get_default_replace_range = <function 208>,
                  complete = <function 209>,
                  execute = <function 210>,
                  get_debug_name = <function 211>,
                  get_default_insert_range = <function 212>,
                  get_default_replae_range = <function 213>,
                  get_entries = <function 214>,
                  get_entry_filter = <function 215>,
                  get_fetching_time = <function 216>,
                  get_keyword_length = <function 217>,
                  get_keyword_pattern = <function 218>,
                  get_matching_config = <function 219>,
                  get_position_encoding_kind = <function 220>,
                  get_source_config = <function 221>,
                  get_trigger_characters = <function 222>,
                  is_available = <function 223>,
                  new = <function 224>,
                  reset = <function 225>,
                  resolve = <function 226>
                }
              }
            }, {
              cache = {
                entries = {},
                <metatable> = {
                  __index = <table 20>
                }
              },
              complete_dedup = <function 227>,
              context = {
                aborted = false,
                bufnr = -1,
                cache = {
                  entries = {},
                  <metatable> = {
                    __index = <table 20>
                  }
                },
                cursor = {
                  col = -1,
                  row = -1
                },
                cursor_after_line = "",
                cursor_before_line = "lua print(vim.inspect(_G))",
                cursor_line = "lua print(vim.inspect(_G))",
                filetype = "",
                id = 23,
                input = "",
                option = {},
                prev_context = {},
                time = 45513374,
                <metatable> = {
                  __index = <table 24>
                }
              },
              entries = {},
              id = 2,
              incomplete = false,
              is_triggered_by_symbol = false,
              name = "buffer",
              offset = -1,
              position_encoding = "utf-16",
              request_offset = -1,
              revision = 3,
              source = <29>{
                buffers = {},
                <metatable> = {
                  __index = <30>{
                    _get_buffers = <function 228>,
                    _get_distance_from_entry = <function 229>,
                    _validate_options = <function 230>,
                    compare_locality = <function 231>,
                    complete = <function 232>,
                    get_keyword_pattern = <function 233>,
                    new = <function 234>
                  }
                }
              },
              status = 1,
              <metatable> = {
                __index = <table 28>
              }
            }, {
              cache = {
                entries = {},
                <metatable> = {
                  __index = <table 20>
                }
              },
              complete_dedup = <function 235>,
              context = {
                aborted = false,
                bufnr = -1,
                cache = {
                  entries = {},
                  <metatable> = {
                    __index = <table 20>
                  }
                },
                cursor = {
                  col = -1,
                  row = -1
                },
                cursor_after_line = "",
                cursor_before_line = "lua print(vim.inspect(_G))",
                cursor_line = "lua print(vim.inspect(_G))",
                filetype = "",
                id = 24,
                input = "",
                option = {},
                prev_context = {},
                time = 45513374,
                <metatable> = {
                  __index = <table 24>
                }
              },
              entries = {},
              id = 3,
              incomplete = false,
              is_triggered_by_symbol = false,
              name = "path",
              offset = -1,
              position_encoding = "utf-16",
              request_offset = -1,
              revision = 3,
              source = {
                <metatable> = {
                  __index = <31>{
                    _candidates = <function 236>,
                    _dirname = <function 237>,
                    _get_documentation = <function 238>,
                    _is_slash_comment = <function 239>,
                    _validate_option = <function 240>,
                    complete = <function 241>,
                    get_keyword_pattern = <function 242>,
                    get_trigger_characters = <function 243>,
                    new = <function 244>,
                    resolve = <function 245>
                  }
                }
              },
              status = 1,
              <metatable> = {
                __index = <table 28>
              }
            }, {
              cache = {
                entries = {},
                <metatable> = {
                  __index = <table 20>
                }
              },
              complete_dedup = <function 246>,
              context = {
                aborted = false,
                bufnr = -1,
                cache = {
                  entries = {},
                  <metatable> = {
                    __index = <table 20>
                  }
                },
                cursor = {
                  col = -1,
                  row = -1
                },
                cursor_after_line = "",
                cursor_before_line = "lua print(vim.inspect(_G))",
                cursor_line = "lua print(vim.inspect(_G))",
                filetype = "",
                id = 25,
                input = "",
                option = {},
                prev_context = {},
                time = 45513374,
                <metatable> = {
                  __index = <table 24>
                }
              },
              entries = {},
              id = 4,
              incomplete = false,
              is_triggered_by_symbol = false,
              name = "cmdline",
              offset = -1,
              position_encoding = "utf-16",
              request_offset = -1,
              revision = 3,
              source = {
                before_line = "",
                ctype = "",
                items = {},
                offset = -1,
                <metatable> = {
                  __index = <32>{
                    complete = <function 247>,
                    get_keyword_pattern = <function 248>,
                    get_trigger_characters = <function 249>,
                    new = <function 250>
                  }
                }
              },
              status = 1,
              <metatable> = {
                __index = <table 28>
              }
            } },
          suspending = false,
          view = {
            custom_entries_view = {
              active = false,
              bottom_up = false,
              entries = {},
              entries_win = {
                buffer_opt = {
                  buftype = "nofile",
                  filetype = "cmp_menu",
                  tabstop = 1
                },
                name = 1,
                opt = {
                  concealcursor = "n",
                  conceallevel = 2,
                  cursorlineopt = "line",
                  foldenable = false,
                  wrap = false
                },
                style = {},
                <metatable> = {
                  __index = <33>{
                    buffer_option = <function 251>,
                    close = <function 252>,
                    get_border_info = <function 253>,
                    get_buffer = <function 254>,
                    get_content_height = <function 255>,
                    info = <function 256>,
                    new = <function 257>,
                    open = <function 258>,
                    option = <function 259>,
                    set_style = <function 260>,
                    update = <function 261>,
                    visible = <function 262>
                  }
                }
              },
              event = {
                events = {
                  change = { <function 263> }
                },
                <metatable> = {
                  __index = <table 26>
                }
              },
              offset = -1,
              <metatable> = {
                __index = <34>{
                  _insert = {
                    pending = false,
                    <metatable> = {
                      __call = <function 264>
                    }
                  },
                  _select = <function 265>,
                  abort = <function 266>,
                  close = <function 267>,
                  draw = <function 268>,
                  get_active_entry = <function 269>,
                  get_entries = <function 270>,
                  get_first_entry = <function 271>,
                  get_offset = <function 272>,
                  get_selected_entry = <function 273>,
                  get_selected_index = <function 274>,
                  info = <function 275>,
                  is_direction_top_down = <function 276>,
                  new = <function 277>,
                  ns = 5,
                  on_change = <function 278>,
                  open = <function 279>,
                  ready = <function 280>,
                  select_next_item = <function 281>,
                  select_prev_item = <function 282>,
                  visible = <function 283>
                }
              }
            },
            docs_view = {
              window = {
                buffer_opt = {
                  buftype = "nofile",
                  filetype = "cmp_docs"
                },
                name = 3,
                opt = {
                  concealcursor = "n",
                  conceallevel = 2,
                  foldenable = false,
                  linebreak = true,
                  scrolloff = 0,
                  showbreak = "NONE",
                  wrap = true
                },
                style = {},
                <metatable> = {
                  __index = <table 33>
                }
              },
              <metatable> = {
                __index = <35>{
                  close = <function 284>,
                  new = <function 285>,
                  open = <function 286>,
                  scroll = <function 287>,
                  visible = <function 288>
                }
              }
            },
            event = {
              events = {
                complete_done = { <function 289> },
                keymap = { <function 290> },
                menu_closed = { <function 291> },
                menu_opened = { <function 292> }
              },
              <metatable> = {
                __index = <table 26>
              }
            },
            ghost_text_view = {
              <metatable> = {
                __index = <36>{
                  hide = <function 293>,
                  new = <function 294>,
                  ns = 7,
                  show = <function 295>,
                  text_gen = <function 296>
                }
              }
            },
            is_docs_view_pinned = false,
            native_entries_view = {
              entries = {},
              event = {
                events = {},
                <metatable> = {
                  __index = <table 26>
                }
              },
              items = {},
              offset = -1,
              preselect_index = 0,
              <metatable> = {
                __index = <37>{
                  abort = <function 297>,
                  close = <function 298>,
                  get_active_entry = <function 299>,
                  get_entries = <function 300>,
                  get_first_entry = <function 301>,
                  get_offset = <function 302>,
                  get_selected_entry = <function 303>,
                  get_selected_index = <function 304>,
                  info = <function 305>,
                  new = <function 306>,
                  on_change = <function 307>,
                  open = <function 308>,
                  preselect = <function 309>,
                  ready = <function 310>,
                  select_next_item = <function 311>,
                  select_prev_item = <function 312>,
                  visible = <function 313>
                }
              }
            },
            resolve_dedup = <function 314>,
            wildmenu_entries_view = {
              active = false,
              entries = {},
              entries_win = {
                buffer_opt = {
                  tabstop = 1
                },
                name = 2,
                opt = {
                  concealcursor = "n",
                  conceallevel = 2,
                  cursorlineopt = "line",
                  foldenable = false,
                  scrolloff = 0,
                  sidescrolloff = 0,
                  winhighlight = "Normal:Pmenu,FloatBorder:Pmenu,CursorLine:PmenuSel,Search:None",
                  wrap = false
                },
                style = {},
                <metatable> = {
                  __index = <table 33>
                }
              },
              event = {
                events = {},
                <metatable> = {
                  __index = <table 26>
                }
              },
              offset = -1,
              offsets = {},
              selected_index = 0,
              <metatable> = {
                __index = <38>{
                  _get_separator = <function 315>,
                  _select = <function 316>,
                  abort = <function 317>,
                  close = <function 318>,
                  draw = <function 319>,
                  get_active_entry = <function 320>,
                  get_entries = <function 321>,
                  get_first_entry = <function 322>,
                  get_offset = <function 323>,
                  get_selected_entry = <function 324>,
                  get_selected_index = <function 325>,
                  info = <function 326>,
                  new = <function 327>,
                  ns = 6,
                  on_change = <function 328>,
                  open = <function 329>,
                  ready = <function 330>,
                  select_next_item = <function 331>,
                  select_prev_item = <function 332>,
                  visible = <function 333>
                }
              }
            },
            <metatable> = {
              __index = <39>{
                _get_entries_view = <function 334>,
                abort = <function 335>,
                close = <function 336>,
                close_docs = <function 337>,
                get_active_entry = <function 338>,
                get_entries = <function 339>,
                get_first_entry = <function 340>,
                get_offset = <function 341>,
                get_selected_entry = <function 342>,
                get_selected_index = <function 343>,
                new = <function 344>,
                on_change = <function 345>,
                on_entry_change = {
                  running = false,
                  stop = <function 346>,
                  sync = <function 347>,
                  timeout = 20,
                  <metatable> = {
                    __call = <function 348>
                  }
                },
                open = <function 349>,
                open_docs = <function 350>,
                ready = <function 351>,
                scroll_docs = <function 352>,
                select_next_item = <function 353>,
                select_prev_item = <function 354>,
                visible = <function 355>
              }
            }
          },
          <metatable> = {
            __index = <40>{
              autoindent = <function 356>,
              complete = <function 357>,
              complete_common_string = <function 358>,
              confirm = <function 359>,
              filter = {
                running = false,
                stop = <function 360>,
                sync = <function 361>,
                timeout = 30,
                <metatable> = {
                  __call = <function 362>
                }
              },
              get_context = <function 363>,
              get_registered_sources = <function 364>,
              get_sources = <function 365>,
              new = <function 366>,
              on_change = <function 367>,
              on_keymap = <function 368>,
              on_moved = <function 369>,
              prepare = <function 370>,
              register_source = <function 371>,
              reset = <function 372>,
              set_context = <function 373>,
              suspend = <function 374>,
              unregister_source = <function 375>
            }
          }
        },
        event = <table 25>,
        get_active_entry = <function 376>,
        get_config = <function 377>,
        get_entries = <function 378>,
        get_registered_sources = <function 379>,
        get_selected_entry = <function 380>,
        get_selected_index = <function 381>,
        lsp = <41>{
          CompletionItemKind = { "Text", "Method", "Function", "Constructor", "Field", "Variable", "Class", "Interface", "Module", "Property", "Unit", "Value", "Enum", "Keyword", "Snippet", "Color", "File", "Reference", "Folder", "EnumMember", "Constant", "Struct", "Event", "Operator", "TypeParameter",
            Class = 7,
            Color = 16,
            Constant = 21,
            Constructor = 4,
            Enum = 13,
            EnumMember = 20,
            Event = 23,
            Field = 5,
            File = 17,
            Folder = 19,
            Function = 3,
            Interface = 8,
            Keyword = 14,
            Method = 2,
            Module = 9,
            Operator = 24,
            Property = 10,
            Reference = 18,
            Snippet = 15,
            Struct = 22,
            Text = 1,
            TypeParameter = 25,
            Unit = 11,
            Value = 12,
            Variable = 6
          },
          CompletionItemTag = {
            Deprecated = 1
          },
          CompletionTriggerKind = {
            Invoked = 1,
            TriggerCharacter = 2,
            TriggerForIncompleteCompletions = 3
          },
          InsertTextFormat = {
            PlainText = 1,
            Snippet = 2
          },
          InsertTextMode = {
            AdjustIndentation = 2,
            AsIs = 1
          },
          MarkupKind = {
            Markdown = "markdown",
            PlainText = "plaintext"
          },
          Position = {
            to_lsp = <function 382>,
            to_utf16 = <function 383>,
            to_utf32 = <function 384>,
            to_utf8 = <function 385>,
            to_vim = <function 386>
          },
          PositionEncodingKind = {
            UTF16 = "utf-16",
            UTF32 = "utf-32",
            UTF8 = "utf-8"
          },
          Range = {
            to_lsp = <function 387>,
            to_vim = <function 388>
          }
        },
        mapping = <table 22>,
        open_docs = <function 389>,
        register_source = <function 390>,
        resubscribe = <function 391>,
        scroll_docs = <function 392>,
        select_next_item = <function 393>,
        select_prev_item = <function 394>,
        setup = {
          buffer = <function 395>,
          cmdline = <function 396>,
          filetype = <function 397>,
          global = <function 398>,
          <metatable> = {
            __call = <function 399>
          }
        },
        status = <function 400>,
        suspend = <function 401>,
        sync = <function 402>,
        unregister_source = <function 403>,
        vim = true,
        visible = <function 404>,
        visible_docs = <function 405>
      },
      ["cmp.config"] = {
        buffers = {},
        cache = {
          entries = {
            ["get:cmdline:0:::1"] = {
              completion = {
                autocomplete = <42>{ "TextChanged" },
                completeopt = "menu,menuone,noselect",
                keyword_length = 1,
                keyword_pattern = "\\%(-\\?\\d\\+\\%(\\.\\d\\+\\)\\?\\|\\h\\w*\\%(-\\w*\\)*\\)"
              },
              confirmation = {
                default_behavior = "insert",
                get_commit_characters = <function 406>
              },
              enabled = <function 407>,
              event = {},
              experimental = {
                ghost_text = false
              },
              formatting = {
                expandable_indicator = true,
                fields = <43>{ "abbr", "kind", "menu" },
                format = <function 408>
              },
              mapping = {},
              matching = {
                disallow_fullfuzzy_matching = false,
                disallow_fuzzy_matching = false,
                disallow_partial_fuzzy_matching = true,
                disallow_partial_matching = false,
                disallow_prefix_unmatching = false,
                disallow_symbol_nonprefix_matching = true
              },
              performance = {
                async_budget = 1,
                confirm_resolve_timeout = 80,
                debounce = 60,
                fetching_timeout = 500,
                filtering_context_budget = 3,
                max_view_entries = 200,
                throttle = 30
              },
              preselect = "item",
              revision = 1,
              snippet = {
                expand = <function 409>
              },
              sorting = {
                comparators = <44>{ <function 159>, <function 148>, <function 165>, <table 21>, <table 19>, <function 149>, <function 166>, <function 150>, <function 160> },
                priority_weight = 2
              },
              sources = {},
              view = {
                docs = {
                  auto_open = true
                },
                entries = {
                  follow_cursor = false,
                  name = "custom",
                  selection_order = "top_down"
                }
              },
              window = {
                completion = {
                  border = <45>{ "", "", "", "", "", "", "", "" },
                  col_offset = 0,
                  scrollbar = true,
                  scrolloff = 0,
                  side_padding = 1,
                  winblend = 0,
                  winhighlight = "Normal:Pmenu,FloatBorder:Pmenu,CursorLine:PmenuSel,Search:None"
                },
                documentation = {
                  border = <46>{ "", "", "", " ", "", "", "", " " },
                  max_height = 29,
                  max_width = 115,
                  winblend = 0,
                  winhighlight = "FloatBorder:NormalFloat"
                }
              }
            },
            ["get:default:0::1:1:1"] = {
              completion = {
                autocomplete = <table 42>,
                completeopt = "menu,menuone,noselect",
                keyword_length = 1,
                keyword_pattern = "\\%(-\\?\\d\\+\\%(\\.\\d\\+\\)\\?\\|\\h\\w*\\%(-\\w*\\)*\\)"
              },
              confirmation = {
                default_behavior = "insert",
                get_commit_characters = <function 406>
              },
              enabled = <function 407>,
              event = {},
              experimental = {
                ghost_text = false
              },
              formatting = {
                expandable_indicator = true,
                fields = <table 43>,
                format = <function 408>
              },
              mapping = {},
              matching = {
                disallow_fullfuzzy_matching = false,
                disallow_fuzzy_matching = false,
                disallow_partial_fuzzy_matching = true,
                disallow_partial_matching = false,
                disallow_prefix_unmatching = false,
                disallow_symbol_nonprefix_matching = true
              },
              performance = {
                async_budget = 1,
                confirm_resolve_timeout = 80,
                debounce = 60,
                fetching_timeout = 500,
                filtering_context_budget = 3,
                max_view_entries = 200,
                throttle = 30
              },
              preselect = "item",
              revision = 1,
              snippet = {
                expand = <function 409>
              },
              sorting = {
                comparators = <table 44>,
                priority_weight = 2
              },
              sources = {},
              view = {
                docs = {
                  auto_open = true
                },
                entries = {
                  follow_cursor = false,
                  name = "custom",
                  selection_order = "top_down"
                }
              },
              window = {
                completion = {
                  border = <table 45>,
                  col_offset = 0,
                  scrollbar = true,
                  scrolloff = 0,
                  side_padding = 1,
                  winblend = 0,
                  winhighlight = "Normal:Pmenu,FloatBorder:Pmenu,CursorLine:PmenuSel,Search:None"
                },
                documentation = {
                  border = <table 46>,
                  max_height = 29,
                  max_width = 115,
                  winblend = 0,
                  winhighlight = "FloatBorder:NormalFloat"
                }
              }
            }
          },
          <metatable> = {
            __index = <table 20>
          }
        },
        cmdline = {},
        enabled = <function 410>,
        filetypes = {},
        get = <function 411>,
        get_source_config = <function 412>,
        global = {
          completion = {
            autocomplete = <table 42>,
            completeopt = "menu,menuone,noselect",
            keyword_length = 1,
            keyword_pattern = "\\%(-\\?\\d\\+\\%(\\.\\d\\+\\)\\?\\|\\h\\w*\\%(-\\w*\\)*\\)"
          },
          confirmation = {
            default_behavior = "insert",
            get_commit_characters = <function 406>
          },
          enabled = <function 407>,
          event = {},
          experimental = {
            ghost_text = false
          },
          formatting = {
            expandable_indicator = true,
            fields = <table 43>,
            format = <function 408>
          },
          mapping = {},
          matching = {
            disallow_fullfuzzy_matching = false,
            disallow_fuzzy_matching = false,
            disallow_partial_fuzzy_matching = true,
            disallow_partial_matching = false,
            disallow_prefix_unmatching = false,
            disallow_symbol_nonprefix_matching = true
          },
          performance = {
            async_budget = 1,
            confirm_resolve_timeout = 80,
            debounce = 60,
            fetching_timeout = 500,
            filtering_context_budget = 3,
            max_view_entries = 200,
            throttle = 30
          },
          preselect = "item",
          snippet = {
            expand = <function 409>
          },
          sorting = {
            comparators = <table 44>,
            priority_weight = 2
          },
          sources = {},
          view = {
            docs = {
              auto_open = true
            },
            entries = {
              follow_cursor = false,
              name = "custom",
              selection_order = "top_down"
            }
          },
          window = {
            completion = {
              border = <table 45>,
              col_offset = 0,
              scrollbar = true,
              scrolloff = 0,
              side_padding = 1,
              winblend = 0,
              winhighlight = "Normal:Pmenu,FloatBorder:Pmenu,CursorLine:PmenuSel,Search:None"
            },
            documentation = {
              border = <table 46>,
              max_height = 29,
              max_width = 115,
              winblend = 0,
              winhighlight = "FloatBorder:NormalFloat"
            }
          }
        },
        is_native_menu = <function 413>,
        normalize = <function 414>,
        onetime = {
          revision = 6
        },
        set_buffer = <function 415>,
        set_cmdline = <function 416>,
        set_filetype = <function 417>,
        set_global = <function 418>,
        set_onetime = <function 419>
      },
      ["cmp.config.compare"] = <table 18>,
      ["cmp.config.default"] = <function 420>,
      ["cmp.config.mapping"] = <table 22>,
      ["cmp.config.sources"] = <function 180>,
      ["cmp.config.window"] = <table 23>,
      ["cmp.context"] = <table 24>,
      ["cmp.core"] = <table 40>,
      ["cmp.entry"] = <47>{
        __index = <table 47>,
        _get_insert_text = <function 421>,
        _get_offset = <function 422>,
        _get_overwrite = <function 423>,
        _get_view = <function 424>,
        _get_vim_item = <function 425>,
        _get_word = <function 426>,
        _match = <function 427>,
        _set_completion_item = <function 428>,
        convert_range_encoding = <function 429>,
        execute = <function 430>,
        fill_defaults = <function 431>,
        get_commit_characters = <function 432>,
        get_completion_item = <function 433>,
        get_documentation = <function 434>,
        get_filter_text = <function 435>,
        get_insert_range = <function 436>,
        get_insert_text = <function 437>,
        get_kind = <function 438>,
        get_offset = <function 439>,
        get_overwrite = <function 440>,
        get_replace_range = <function 441>,
        get_view = <function 442>,
        get_view_matches = <function 443>,
        get_vim_item = <function 444>,
        get_word = <function 445>,
        is_deprecated = <function 446>,
        is_invalid = <function 447>,
        match = <function 448>,
        new = <function 449>,
        resolve = <function 450>
      },
      ["cmp.matcher"] = {
        NOT_FUZZY_FACTOR = 6,
        PREFIX_FACTOR = 8,
        WORD_BOUNDALY_ORDER_FACTOR = 10,
        debug = <function 451>,
        find_match_region = <function 452>,
        fuzzy = <function 453>,
        match = <function 454>
      },
      ["cmp.source"] = <table 28>,
      ["cmp.types"] = {
        cmp = <48>{
          ConfirmBehavior = <table 12>,
          ContextReason = <table 13>,
          ItemField = <table 14>,
          PreselectMode = <table 15>,
          SelectBehavior = <table 16>,
          TriggerEvent = <table 17>
        },
        lsp = <table 41>,
        vim = true
      },
      ["cmp.types.cmp"] = <table 48>,
      ["cmp.types.lsp"] = <table 41>,
      ["cmp.types.vim"] = true,
      ["cmp.utils.api"] = {
        apply_text_edits = <function 455>,
        get_current_line = <function 456>,
        get_cursor = <function 457>,
        get_cursor_before_line = <function 458>,
        get_mode = <function 459>,
        get_screen_cursor = <function 460>,
        is_cmdline_mode = <function 461>,
        is_insert_mode = <function 462>,
        is_select_mode = <function 463>,
        is_suitable_mode = <function 464>,
        is_visual_mode = <function 465>
      },
      ["cmp.utils.async"] = {
        abort = <function 466>,
        debounce_next_tick = <function 467>,
        debounce_next_tick_by_keymap = <function 468>,
        dedup = <function 469>,
        is_async = <function 470>,
        step = <function 471>,
        sync = <function 472>,
        throttle = <function 473>,
        timeout = <function 474>,
        wrap = <function 475>,
        yield = <function 476>
      },
      ["cmp.utils.autocmd"] = {
        emit = <function 477>,
        events = {
          CmdlineChanged = { <function 478> },
          CmdlineEnter = { <function 479> },
          CmdlineLeave = { <function 480> },
          CmdwinEnter = { <function 480> },
          ColorScheme = { <function 481> },
          CompleteChanged = { <function 482>, <function 483>, <function 484> },
          CursorMovedI = { <function 485> },
          InsertEnter = { <function 486> },
          InsertLeave = { <function 480> },
          TextChangedI = { <function 487> },
          TextChangedP = { <function 487> },
          UIEnter = { <function 481> }
        },
        group = 14,
        resubscribe = <function 488>,
        subscribe = <function 489>
      },
      ["cmp.utils.buffer"] = {
        cache = {},
        ensure = <function 490>,
        get = <function 491>
      },
      ["cmp.utils.cache"] = <table 20>,
      ["cmp.utils.char"] = {
        get_next_semantic_index = <function 492>,
        is_alnum = <function 493>,
        is_alpha = <function 494>,
        is_digit = <function 495>,
        is_printable = <function 496>,
        is_semantic_index = <function 497>,
        is_symbol = <function 498>,
        is_upper = <function 499>,
        is_white = <function 500>,
        match = <function 501>
      },
      ["cmp.utils.debug"] = {
        flag = false,
        log = <function 502>
      },
      ["cmp.utils.event"] = <table 26>,
      ["cmp.utils.feedkeys"] = {
        call = {
          callbacks = {},
          <metatable> = {
            __call = <function 503>
          }
        },
        run = <function 504>
      },
      ["cmp.utils.highlight"] = {
        inherit = <function 505>,
        keys = { "fg", "bg", "bold", "italic", "reverse", "standout", "underline", "undercurl", "strikethrough" }
      },
      ["cmp.utils.keymap"] = {
        backspace = <function 506>,
        delete = <function 507>,
        equals = <function 508>,
        fallback = <function 509>,
        get_map = <function 510>,
        indentkeys = <function 511>,
        listen = <function 512>,
        normalize = <function 513>,
        set_map = <function 514>,
        solve = <function 515>,
        t = <function 516>,
        to_keymap = {
          ["<BSlash>"] = { "\\" },
          ["<Bar>"] = { "|" },
          ["<CR>"] = { "\n", "\r", "\r\n" },
          ["<Space>"] = { " " },
          ["<Tab>"] = { "\t" },
          <metatable> = {
            __call = <function 517>
          }
        },
        undobreak = <function 518>,
        undojoin = <function 519>
      },
      ["cmp.utils.misc"] = {
        bool = <function 520>,
        concat = <function 521>,
        contains = <function 522>,
        copy = <function 523>,
        deprecated = <function 524>,
        empty = <function 525>,
        id = {
          group = {
            ["cmp.context.new"] = 26,
            ["cmp.source.new"] = 4,
            ["cmp.utils.window.new"] = 3
          },
          <metatable> = {
            __call = <function 526>
          }
        },
        merge = <function 527>,
        none = vim.NIL,
        once = <function 528>,
        redraw = {
          doing = false,
          force = false,
          incsearch_redraw_keys = " <BS>",
          <metatable> = {
            __call = <function 529>
          }
        },
        rep = <function 530>,
        set = <function 531>,
        to_utfindex = <function 532>,
        to_vimindex = <function 533>
      },
      ["cmp.utils.options"] = {
        buf_set_option = <function 534>,
        win_set_option = <function 535>
      },
      ["cmp.utils.pattern"] = {
        _regexes = {},
        matchstr = <function 536>,
        offset = <function 537>,
        regex = <function 538>
      },
      ["cmp.utils.snippet"] = {
        NodeType = {
          CHOICE = 4,
          FORMAT = 6,
          PLACEHOLDER = 2,
          SNIPPET = 0,
          TABSTOP = 1,
          TEXT = 7,
          TRANSFORM = 5,
          VARIABLE = 3
        },
        parse = <function 539>
      },
      ["cmp.utils.str"] = {
        escape = <function 540>,
        get_common_string = <function 541>,
        get_word = <function 542>,
        has_prefix = <function 543>,
        oneline = <function 544>,
        remove_suffix = <function 545>,
        trim = <function 546>
      },
      ["cmp.utils.window"] = <table 33>,
      ["cmp.view"] = <table 39>,
      ["cmp.view.custom_entries_view"] = <table 34>,
      ["cmp.view.docs_view"] = <table 35>,
      ["cmp.view.ghost_text_view"] = <table 36>,
      ["cmp.view.native_entries_view"] = <table 37>,
      ["cmp.view.wildmenu_entries_view"] = <table 38>,
      cmp_buffer = <table 29>,
      ["cmp_buffer.buffer"] = {
        GET_LINES_CHUNK_SIZE = 1000,
        close = <function 547>,
        get_words = <function 548>,
        get_words_distances = <function 549>,
        index_line = <function 550>,
        index_range = <function 551>,
        mark_all_lines_dirty = <function 552>,
        new = <function 553>,
        rebuild_unique_words = <function 554>,
        safe_buf_call = <function 555>,
        start_indexing_timer = <function 556>,
        stop_indexing_timer = <function 557>,
        watch = <function 558>
      },
      ["cmp_buffer.source"] = <table 30>,
      ["cmp_buffer.timer"] = {
        close = <function 559>,
        is_active = <function 560>,
        new = <function 561>,
        start = <function 562>,
        stop = <function 563>
      },
      cmp_cmdline = <table 32>,
      cmp_luasnip = <table 27>,
      cmp_nvim_lsp = {
        _on_insert_enter = <function 564>,
        client_source_map = {},
        default_capabilities = <function 565>,
        setup = <function 566>,
        update_capabilities = <function 567>
      },
      ["cmp_nvim_lsp.source"] = {
        _get = <function 568>,
        _request = <function 569>,
        complete = <function 570>,
        execute = <function 571>,
        get_debug_name = <function 572>,
        get_keyword_pattern = <function 573>,
        get_position_encoding_kind = <function 574>,
        get_trigger_characters = <function 575>,
        is_available = <function 576>,
        new = <function 577>,
        resolve = <function 578>
      },
      cmp_path = <table 31>,
      coroutine = <table 3>,
      debug = <table 4>,
      ffi = {
        C = <userdata 4>,
        abi = <function 579>,
        alignof = <function 580>,
        arch = "x64",
        cast = <function 581>,
        cdef = <function 582>,
        copy = <function 583>,
        errno = <function 584>,
        fill = <function 585>,
        gc = <function 586>,
        istype = <function 587>,
        load = <function 588>,
        metatype = <function 589>,
        new = <function 590>,
        offsetof = <function 591>,
        os = "Linux",
        sizeof = <function 592>,
        string = <function 593>,
        typeinfo = <function 594>,
        typeof = <function 595>
      },
      fixes = {
        setup = <function 596>
      },
      gitsigns = {
        setup = <function 597>,
        <metatable> = {
          __index = <function 598>
        }
      },
      ["gitsigns.async"] = {
        arun = <function 599>,
        async = <function 600>,
        await = <function 601>,
        awrap = <function 602>,
        create = <function 603>,
        iter = <function 604>,
        join = <function 605>,
        joinany = <function 606>,
        schedule = <function 607>,
        status = <function 608>
      },
      ["gitsigns.config"] = {
        build = <function 609>,
        config = {
          _config = {
            auto_attach = true,
            debug_mode = false
          },
          <metatable> = {
            __index = <function 610>,
            __newindex = <function 611>
          }
        },
        schema = {
          _git_version = {
            default = "auto",
            description = "      Version of git available. Set to 'auto' to automatically detect.\n    ",
            type = "string"
          },
          _new_sign_calc = {
            default = false,
            description = "      Use new sign calculation method\n    ",
            type = "boolean"
          },
          _on_attach_pre = {
            description = "      Asynchronous hook called before attaching to a buffer. Mainly used to\n      configure detached worktrees.\n\n      This callback must call its callback argument. The callback argument can\n      accept an optional table argument with the keys: 'gitdir' and 'toplevel'.\n\n      Example: >lua\n      on_attach_pre = function(bufnr, callback)\n        ...\n        callback {\n          gitdir = ...,\n          toplevel = ...\n        }\n      end\n      <\n    ",
            type = "function"
          },
          _refresh_staged_on_update = {
            default = false,
            description = "      Always refresh the staged file on each update. Disabling this will cause\n      the staged file to only be refreshed when an update to the index is\n      detected.\n    ",
            type = "boolean"
          },
          _test_mode = {
            default = false,
            description = "Enable test mode",
            type = "boolean"
          },
          _threaded_diff = {
            default = true,
            description = "      Run diffs on a separate thread\n    ",
            type = "boolean"
          },
          _verbose = {
            default = false,
            description = "      More verbose debug message. Requires debug_mode=true.\n    ",
            type = "boolean"
          },
          attach_to_untracked = {
            default = false,
            description = "      Attach to untracked files.\n    ",
            type = "boolean"
          },
          auto_attach = {
            default = true,
            description = "      Automatically attach to files.\n    ",
            type = "boolean"
          },
          base = {
            default_help = "index",
            description = "      The object/revision to diff against.\n      See |gitsigns-revision|.\n    ",
            type = "string"
          },
          count_chars = {
            default = { "1", "2", "3", "4", "5", "6", "7", "8", "9",
              ["+"] = ">"
            },
            description = "      The count characters used when `signs.*.show_count` is enabled. The\n      `+` entry is used as a fallback. With the default, any count outside\n      of 1-9 uses the `>` character in the sign.\n\n      Possible use cases for this field:\n        • to specify unicode characters for the counts instead of 1-9.\n        • to define characters to be used for counts greater than 9.\n    ",
            type = "table"
          },
          culhl = {
            default = false,
            description = "      Enable/disable highlights for the sign column when the cursor is on\n      the same line.\n\n      When enabled the highlights defined in `signs.*.culhl` are used. If\n      the highlight group does not exist, then it is automatically defined\n      and linked to the corresponding highlight group in `signs.*.hl`.\n    ",
            type = "boolean"
          },
          current_line_blame = {
            default = false,
            description = "      Adds an unobtrusive and customisable blame annotation at the end of\n      the current line.\n\n      The highlight group used for the text is `GitSignsCurrentLineBlame`.\n    ",
            type = "boolean"
          },
          current_line_blame_formatter = {
            default = " <author>, <author_time:%R> - <summary> ",
            description = '      String or function used to format the virtual text of\n      |gitsigns-config-current_line_blame|.\n\n      When a string, accepts the following format specifiers:\n\n          • `<abbrev_sha>`\n          • `<orig_lnum>`\n          • `<final_lnum>`\n          • `<author>`\n          • `<author_mail>`\n          • `<author_time>` or `<author_time:FORMAT>`\n          • `<author_tz>`\n          • `<committer>`\n          • `<committer_mail>`\n          • `<committer_time>` or `<committer_time:FORMAT>`\n          • `<committer_tz>`\n          • `<summary>`\n          • `<previous>`\n          • `<filename>`\n\n        For `<author_time:FORMAT>` and `<committer_time:FORMAT>`, `FORMAT` can\n        be any valid date format that is accepted by `os.date()` with the\n        addition of `%R` (defaults to `%Y-%m-%d`):\n\n          • `%a`  abbreviated weekday name (e.g., Wed)\n          • `%A`  full weekday name (e.g., Wednesday)\n          • `%b`  abbreviated month name (e.g., Sep)\n          • `%B`  full month name (e.g., September)\n          • `%c`  date and time (e.g., 09/16/98 23:48:10)\n          • `%d`  day of the month (16) [01-31]\n          • `%H`  hour, using a 24-hour clock (23) [00-23]\n          • `%I`  hour, using a 12-hour clock (11) [01-12]\n          • `%M`  minute (48) [00-59]\n          • `%m`  month (09) [01-12]\n          • `%p`  either "am" or "pm" (pm)\n          • `%S`  second (10) [00-61]\n          • `%w`  weekday (3) [0-6 = Sunday-Saturday]\n          • `%x`  date (e.g., 09/16/98)\n          • `%X`  time (e.g., 23:48:10)\n          • `%Y`  full year (1998)\n          • `%y`  two-digit year (98) [00-99]\n          • `%%`  the character `%´\n          • `%R`  relative (e.g., 4 months ago)\n\n      When a function:\n        Parameters: ~\n          {name}       Git user name returned from `git config user.name` .\n          {blame_info} Table with the following keys:\n                         • `abbrev_sha`: string\n                         • `orig_lnum`: integer\n                         • `final_lnum`: integer\n                         • `author`: string\n                         • `author_mail`: string\n                         • `author_time`: integer\n                         • `author_tz`: string\n                         • `committer`: string\n                         • `committer_mail`: string\n                         • `committer_time`: integer\n                         • `committer_tz`: string\n                         • `summary`: string\n                         • `previous`: string\n                         • `filename`: string\n                         • `boundary`: true?\n\n                       Note that the keys map onto the output of:\n                         `git blame --line-porcelain`\n\n        Return: ~\n          The result of this function is passed directly to the `opts.virt_text`\n          field of |nvim_buf_set_extmark| and thus must be a list of\n          [text, highlight] tuples.\n    ',
            type = { "string", "function" }
          },
          current_line_blame_formatter_nc = {
            default = " <author>",
            description = "      String or function used to format the virtual text of\n      |gitsigns-config-current_line_blame| for lines that aren't committed.\n\n      See |gitsigns-config-current_line_blame_formatter| for more information.\n    ",
            type = { "string", "function" }
          },
          current_line_blame_opts = {
            deep_extend = true,
            default = {
              delay = 1000,
              use_focus = true,
              virt_text = true,
              virt_text_pos = "eol",
              virt_text_priority = 100
            },
            description = "      Options for the current line blame annotation.\n\n      Fields: ~\n        • virt_text: boolean\n          Whether to show a virtual text blame annotation.\n        • virt_text_pos: string\n          Blame annotation position. Available values:\n            `eol`         Right after eol character.\n            `overlay`     Display over the specified column, without\n                          shifting the underlying text.\n            `right_align` Display right aligned in the window.\n        • delay: integer\n          Sets the delay (in milliseconds) before blame virtual text is\n          displayed.\n        • ignore_whitespace: boolean\n          Ignore whitespace when running blame.\n        • virt_text_priority: integer\n          Priority of virtual text.\n        • use_focus: boolean\n          Enable only when buffer is in focus\n        • extra_opts: string[]\n          Extra options passed to `git-blame`.\n    ",
            type = "table"
          },
          debug_mode = {
            default = false,
            description = "      Enables debug logging and makes the following functions\n      available: `dump_cache`, `debug_messages`, `clear_debug`.\n    ",
            type = "boolean"
          },
          diff_opts = {
            deep_extend = true,
            default = <function 612>,
            default_change = <function 613>,
            default_help = "derived from 'diffopt'",
            description = "      Diff options. If the default value is used, then changes to 'diffopt' are\n      automatically applied.\n\n      Fields: ~\n        • algorithm: string\n            Diff algorithm to use. Values:\n            • \"myers\"      the default algorithm\n            • \"minimal\"    spend extra time to generate the\n                           smallest possible diff\n            • \"patience\"   patience diff algorithm\n            • \"histogram\"  histogram diff algorithm\n        • internal: boolean\n            Use Neovim's built in xdiff library for running diffs.\n        • indent_heuristic: boolean\n            Use the indent heuristic for the internal\n            diff library.\n        • vertical: boolean\n            Start diff mode with vertical splits.\n        • linematch: integer\n            Enable second-stage diff on hunks to align lines.\n            Requires `internal=true`.\n       • ignore_blank_lines: boolean\n            Ignore changes where lines are blank.\n       • ignore_whitespace_change: boolean\n            Ignore changes in amount of white space.\n            It should ignore adding trailing white space,\n            but not leading white space.\n       • ignore_whitespace: boolean\n           Ignore all white space changes.\n       • ignore_whitespace_change_at_eol: boolean\n            Ignore white space changes at end of line.\n    ",
            type = "table"
          },
          linehl = {
            default = false,
            description = "      Enable/disable line highlights.\n\n      When enabled the highlights defined in `signs.*.linehl` are used. If\n      the highlight group does not exist, then it is automatically defined\n      and linked to the corresponding highlight group in `signs.*.hl`.\n    ",
            type = "boolean"
          },
          max_file_length = {
            default = 40000,
            description = "      Max file length (in lines) to attach to.\n    ",
            type = "number"
          },
          numhl = {
            default = false,
            description = "      Enable/disable line number highlights.\n\n      When enabled the highlights defined in `signs.*.numhl` are used. If\n      the highlight group does not exist, then it is automatically defined\n      and linked to the corresponding highlight group in `signs.*.hl`.\n    ",
            type = "boolean"
          },
          on_attach = {
            description = "      Callback called when attaching to a buffer. Mainly used to setup keymaps.\n      The buffer number is passed as the first argument.\n\n      This callback can return `false` to prevent attaching to the buffer.\n\n      Example: >lua\n        on_attach = function(bufnr)\n          if vim.api.nvim_buf_get_name(bufnr):match(<PATTERN>) then\n            -- Don't attach to specific buffers whose name matches a pattern\n            return false\n          end\n\n          -- Setup keymaps\n          vim.api.nvim_buf_set_keymap(bufnr, 'n', 'hs', '<cmd>lua require\"gitsigns\".stage_hunk()<CR>', {})\n          ... -- More keymaps\n        end\n<\n    ",
            type = "function"
          },
          preview_config = {
            deep_extend = true,
            default = {
              col = 1,
              relative = "cursor",
              row = 0,
              style = "minimal"
            },
            description = "      Option overrides for the Gitsigns preview window. Table is passed directly\n      to `nvim_open_win`.\n    ",
            type = "table"
          },
          show_deleted = {
            default = false,
            deprecated = true,
            description = "      Show the old version of hunks inline in the buffer (via virtual lines).\n\n      Note: Virtual lines currently use the highlight `GitSignsDeleteVirtLn`.\n    ",
            type = "boolean"
          },
          sign_priority = {
            default = 6,
            description = "      Priority to use for signs.\n    ",
            type = "number"
          },
          signcolumn = {
            default = true,
            description = "      Enable/disable symbols in the sign column.\n\n      When enabled the highlights defined in `signs.*.hl` and symbols defined\n      in `signs.*.text` are used.\n    ",
            type = "boolean"
          },
          signs = {
            deep_extend = true,
            default = {
              add = {
                text = "┃"
              },
              change = {
                text = "┃"
              },
              changedelete = {
                text = "~"
              },
              delete = {
                text = "▁"
              },
              topdelete = {
                text = "▔"
              },
              untracked = {
                text = "┆"
              }
            },
            default_help = "{\n      add          = { text = '┃' },\n      change       = { text = '┃' },\n      delete       = { text = '▁' },\n      topdelete    = { text = '▔' },\n      changedelete = { text = '~' },\n      untracked    = { text = '┆' },\n    }",
            description = "      Configuration for signs:\n        • `text` specifies the character to use for the sign.\n        • `show_count` to enable showing count of hunk, e.g. number of deleted\n          lines.\n\n      The highlights `GitSigns[kind][type]` is used for each kind of sign. E.g.\n      'add' signs uses the highlights:\n        • `GitSignsAdd`   (for normal text signs)\n        • `GitSignsAddNr` (for signs when `config.numhl == true`)\n        • `GitSignsAddLn `(for signs when `config.linehl == true`)\n        • `GitSignsAddCul `(for signs when `config.culhl == true`)\n\n      See |gitsigns-highlight-groups|.\n    ",
            type = <function 614>,
            type_help = "table"
          },
          signs_staged = {
            deep_extend = true,
            default = {
              add = {
                text = "┃"
              },
              change = {
                text = "┃"
              },
              changedelete = {
                text = "~"
              },
              delete = {
                text = "▁"
              },
              topdelete = {
                text = "▔"
              }
            },
            default_help = "{\n      add          = { text = '┃' },\n      change       = { text = '┃' },\n      delete       = { text = '▁' },\n      topdelete    = { text = '▔' },\n      changedelete = { text = '~' },\n    }",
            description = "    Configuration for signs of staged hunks.\n\n    See |gitsigns-config-signs|.\n    ",
            type = "table"
          },
          signs_staged_enable = {
            default = true,
            description = "    Show signs for staged hunks.\n\n    When enabled the signs defined in |git-config-signs_staged|` are used.\n    ",
            type = "boolean"
          },
          status_formatter = {
            default = <function 615>,
            default_help = "function(status)\n      local added, changed, removed = status.added, status.changed, status.removed\n      local status_txt = {}\n      if added   and added   > 0 then table.insert(status_txt, '+'..added  ) end\n      if changed and changed > 0 then table.insert(status_txt, '~'..changed) end\n      if removed and removed > 0 then table.insert(status_txt, '-'..removed) end\n      return table.concat(status_txt, ' ')\n    end",
            description = "      Function used to format `b:gitsigns_status`.\n    ",
            type = "function"
          },
          trouble = {
            default = <function 616>,
            default_help = "true if installed",
            description = "      When using setqflist() or setloclist(), open Trouble instead of the\n      quickfix/location list window.\n    ",
            type = "boolean"
          },
          update_debounce = {
            default = 100,
            description = "      Debounce time for updates (in milliseconds).\n    ",
            type = "number"
          },
          watch_gitdir = {
            deep_extend = true,
            default = {
              enable = true,
              follow_files = true
            },
            description = "      When opening a file, a libuv watcher is placed on the respective\n      `.git` directory to detect when changes happen to use as a trigger to\n      update signs.\n\n      Fields: ~\n        • `enable`:\n            Whether the watcher is enabled.\n\n        • `follow_files`:\n            If a file is moved with `git mv`, switch the buffer to the new location.\n    ",
            type = "table"
          },
          word_diff = {
            default = false,
            description = "      Highlight intra-line word differences in the buffer.\n      Requires `config.diff_opts.internal = true` .\n\n      Uses the highlights:\n        • For word diff in previews:\n          • `GitSignsAddInline`\n          • `GitSignsChangeInline`\n          • `GitSignsDeleteInline`\n        • For word diff in buffer:\n          • `GitSignsAddLnInline`\n          • `GitSignsChangeLnInline`\n          • `GitSignsDeleteLnInline`\n        • For word diff in virtual lines (e.g. show_deleted):\n          • `GitSignsAddVirtLnInline`\n          • `GitSignsChangeVirtLnInline`\n          • `GitSignsDeleteVirtLnInline`\n    ",
            type = "boolean"
          },
          worktrees = {
            default = {},
            description = "      Detached working trees.\n\n      Array of tables with the keys `gitdir` and `toplevel`.\n\n      If normal attaching fails, then each entry in the table is attempted\n      with the work tree details set.\n\n      Example: >lua\n        worktrees = {\n          {\n            toplevel = vim.env.HOME,\n            gitdir = vim.env.HOME .. '/projects/dotfiles/.git'\n          }\n        }\n    ",
            type = "table"
          }
        },
        subscribe = <function 617>
      },
      ["gitsigns.debounce"] = {
        debounce_trailing = <function 618>,
        throttle_by_id = <function 619>
      },
      ["gitsigns.debug.log"] = {
        assert = <function 620>,
        clear = <function 621>,
        debug_mode = <function 622>,
        dprint = <function 623>,
        dprintf = <function 624>,
        eprint = <function 625>,
        eprintf = <function 626>,
        get = <function 627>,
        messages = {},
        show = <function 628>,
        verbose = <function 629>,
        vprint = <function 630>,
        vprintf = <function 631>
      },
      ["gitsigns.highlight"] = {
        hls = { {
            GitSignsAdd = { "GitGutterAdd", "SignifySignAdd", "DiffAddedGutter", "Added", "DiffAdd",
              desc = "Used for the text of 'add' signs."
            }
          }, {
            GitSignsChange = { "GitGutterChange", "SignifySignChange", "DiffModifiedGutter", "Changed", "DiffChange",
              desc = "Used for the text of 'change' signs."
            }
          }, {
            GitSignsDelete = { "GitGutterDelete", "SignifySignDelete", "DiffRemovedGutter", "Removed", "DiffDelete",
              desc = "Used for the text of 'delete' signs."
            }
          }, {
            GitSignsChangedelete = { "GitSignsChange",
              desc = "Used for the text of 'changedelete' signs."
            }
          }, {
            GitSignsTopdelete = { "GitSignsDelete",
              desc = "Used for the text of 'topdelete' signs."
            }
          }, {
            GitSignsUntracked = { "GitSignsAdd",
              desc = "Used for the text of 'untracked' signs."
            }
          }, {
            GitSignsAddNr = { "GitGutterAddLineNr", "GitSignsAdd",
              desc = "Used for number column (when `config.numhl == true`) of 'add' signs."
            }
          }, {
            GitSignsChangeNr = { "GitGutterChangeLineNr", "GitSignsChange",
              desc = "Used for number column (when `config.numhl == true`) of 'change' signs."
            }
          }, {
            GitSignsDeleteNr = { "GitGutterDeleteLineNr", "GitSignsDelete",
              desc = "Used for number column (when `config.numhl == true`) of 'delete' signs."
            }
          }, {
            GitSignsChangedeleteNr = { "GitSignsChangeNr",
              desc = "Used for number column (when `config.numhl == true`) of 'changedelete' signs."
            }
          }, {
            GitSignsTopdeleteNr = { "GitSignsDeleteNr",
              desc = "Used for number column (when `config.numhl == true`) of 'topdelete' signs."
            }
          }, {
            GitSignsUntrackedNr = { "GitSignsAddNr",
              desc = "Used for number column (when `config.numhl == true`) of 'untracked' signs."
            }
          }, {
            GitSignsAddLn = { "GitGutterAddLine", "SignifyLineAdd", "DiffAdd",
              desc = "Used for buffer line (when `config.linehl == true`) of 'add' signs."
            }
          }, {
            GitSignsChangeLn = { "GitGutterChangeLine", "SignifyLineChange", "DiffChange",
              desc = "Used for buffer line (when `config.linehl == true`) of 'change' signs."
            }
          }, {
            GitSignsChangedeleteLn = { "GitSignsChangeLn",
              desc = "Used for buffer line (when `config.linehl == true`) of 'changedelete' signs."
            }
          }, {
            GitSignsTopdeleteLn = { "GitSignsDeleteLn",
              desc = "Used for buffer line (when `config.linehl == true`) of 'topdelete' signs."
            }
          }, {
            GitSignsUntrackedLn = { "GitSignsAddLn",
              desc = "Used for buffer line (when `config.linehl == true`) of 'untracked' signs."
            }
          }, {
            GitSignsAddCul = { "GitSignsAdd",
              desc = "Used for the text (when the cursor is on the same line as the sign) of 'add' signs."
            }
          }, {
            GitSignsChangeCul = { "GitSignsChange",
              desc = "Used for the text (when the cursor is on the same line as the sign) of 'change' signs."
            }
          }, {
            GitSignsDeleteCul = { "GitSignsDelete",
              desc = "Used for the text (when the cursor is on the same line as the sign) of 'delete' signs."
            }
          }, {
            GitSignsChangedeleteCul = { "GitSignsChangeCul",
              desc = "Used for the text (when the cursor is on the same line as the sign) of 'changedelete' signs."
            }
          }, {
            GitSignsTopdeleteCul = { "GitSignsDeleteCul",
              desc = "Used for the text (when the cursor is on the same line as the sign) of 'topdelete' signs."
            }
          }, {
            GitSignsUntrackedCul = { "GitSignsAddCul",
              desc = "Used for the text (when the cursor is on the same line as the sign) of 'untracked' signs."
            }
          }, {
            GitSignsStagedAdd = { "GitSignsAdd",
              desc = "Used for the text of 'add' staged signs.",
              fg_factor = 0.5
            }
          }, {
            GitSignsStagedChange = { "GitSignsChange",
              desc = "Used for the text of 'change' staged signs.",
              fg_factor = 0.5
            }
          }, {
            GitSignsStagedDelete = { "GitSignsDelete",
              desc = "Used for the text of 'delete' staged signs.",
              fg_factor = 0.5
            }
          }, {
            GitSignsStagedChangedelete = { "GitSignsChangedelete",
              desc = "Used for the text of 'changedelete' staged signs.",
              fg_factor = 0.5
            }
          }, {
            GitSignsStagedTopdelete = { "GitSignsTopdelete",
              desc = "Used for the text of 'topdelete' staged signs.",
              fg_factor = 0.5
            }
          }, {
            GitSignsStagedUntracked = { "GitSignsUntracked",
              desc = "Used for the text of 'untracked' staged signs.",
              fg_factor = 0.5
            }
          }, {
            GitSignsStagedAddNr = { "GitSignsAddNr",
              desc = "Used for number column (when `config.numhl == true`) of 'add' staged signs.",
              fg_factor = 0.5
            }
          }, {
            GitSignsStagedChangeNr = { "GitSignsChangeNr",
              desc = "Used for number column (when `config.numhl == true`) of 'change' staged signs.",
              fg_factor = 0.5
            }
          }, {
            GitSignsStagedDeleteNr = { "GitSignsDeleteNr",
              desc = "Used for number column (when `config.numhl == true`) of 'delete' staged signs.",
              fg_factor = 0.5
            }
          }, {
            GitSignsStagedChangedeleteNr = { "GitSignsChangedeleteNr",
              desc = "Used for number column (when `config.numhl == true`) of 'changedelete' staged signs.",
              fg_factor = 0.5
            }
          }, {
            GitSignsStagedTopdeleteNr = { "GitSignsTopdeleteNr",
              desc = "Used for number column (when `config.numhl == true`) of 'topdelete' staged signs.",
              fg_factor = 0.5
            }
          }, {
            GitSignsStagedUntrackedNr = { "GitSignsUntrackedNr",
              desc = "Used for number column (when `config.numhl == true`) of 'untracked' staged signs.",
              fg_factor = 0.5
            }
          }, {
            GitSignsStagedAddLn = { "GitSignsAddLn",
              desc = "Used for buffer line (when `config.linehl == true`) of 'add' staged signs.",
              fg_factor = 0.5
            }
          }, {
            GitSignsStagedChangeLn = { "GitSignsChangeLn",
              desc = "Used for buffer line (when `config.linehl == true`) of 'change' staged signs.",
              fg_factor = 0.5
            }
          }, {
            GitSignsStagedChangedeleteLn = { "GitSignsChangedeleteLn",
              desc = "Used for buffer line (when `config.linehl == true`) of 'changedelete' staged signs.",
              fg_factor = 0.5
            }
          }, {
            GitSignsStagedTopdeleteLn = { "GitSignsTopdeleteLn",
              desc = "Used for buffer line (when `config.linehl == true`) of 'topdelete' staged signs.",
              fg_factor = 0.5
            }
          }, {
            GitSignsStagedUntrackedLn = { "GitSignsUntrackedLn",
              desc = "Used for buffer line (when `config.linehl == true`) of 'untracked' staged signs.",
              fg_factor = 0.5
            }
          }, {
            GitSignsStagedAddCul = { "GitSignsAddCul",
              desc = "Used for the text (when the cursor is on the same line as the sign) of 'add' staged signs.",
              fg_factor = 0.5
            }
          }, {
            GitSignsStagedChangeCul = { "GitSignsChangeCul",
              desc = "Used for the text (when the cursor is on the same line as the sign) of 'change' staged signs.",
              fg_factor = 0.5
            }
          }, {
            GitSignsStagedDeleteCul = { "GitSignsDeleteCul",
              desc = "Used for the text (when the cursor is on the same line as the sign) of 'delete' staged signs.",
              fg_factor = 0.5
            }
          }, {
            GitSignsStagedChangedeleteCul = { "GitSignsChangedeleteCul",
              desc = "Used for the text (when the cursor is on the same line as the sign) of 'changedelete' staged signs.",
              fg_factor = 0.5
            }
          }, {
            GitSignsStagedTopdeleteCul = { "GitSignsTopdeleteCul",
              desc = "Used for the text (when the cursor is on the same line as the sign) of 'topdelete' staged signs.",
              fg_factor = 0.5
            }
          }, {
            GitSignsStagedUntrackedCul = { "GitSignsUntrackedCul",
              desc = "Used for the text (when the cursor is on the same line as the sign) of 'untracked' staged signs.",
              fg_factor = 0.5
            }
          }, {
            GitSignsAddPreview = { "GitGutterAddLine", "SignifyLineAdd", "DiffAdd",
              desc = "Used for added lines in previews."
            }
          }, {
            GitSignsDeletePreview = { "GitGutterDeleteLine", "SignifyLineDelete", "DiffDelete",
              desc = "Used for deleted lines in previews."
            }
          }, {
            GitSignsCurrentLineBlame = { "NonText",
              desc = "Used for current line blame."
            }
          }, {
            GitSignsAddInline = { "TermCursor",
              desc = "Used for added word diff regions in inline previews."
            }
          }, {
            GitSignsDeleteInline = { "TermCursor",
              desc = "Used for deleted word diff regions in inline previews."
            }
          }, {
            GitSignsChangeInline = { "TermCursor",
              desc = "Used for changed word diff regions in inline previews."
            }
          }, {
            GitSignsAddLnInline = { "GitSignsAddInline",
              desc = "Used for added word diff regions when `config.word_diff == true`."
            }
          }, {
            GitSignsChangeLnInline = { "GitSignsChangeInline",
              desc = "Used for changed word diff regions when `config.word_diff == true`."
            }
          }, {
            GitSignsDeleteLnInline = { "GitSignsDeleteInline",
              desc = "Used for deleted word diff regions when `config.word_diff == true`."
            }
          }, {
            GitSignsDeleteVirtLn = { "GitGutterDeleteLine", "SignifyLineDelete", "DiffDelete",
              desc = "Used for deleted lines shown by inline `preview_hunk_inline()` or `show_deleted()`."
            }
          }, {
            GitSignsDeleteVirtLnInLine = { "GitSignsDeleteLnInline",
              desc = "Used for word diff regions in lines shown by inline `preview_hunk_inline()` or `show_deleted()`."
            }
          }, {
            GitSignsVirtLnum = { "GitSignsDeleteVirtLn",
              desc = "Used for line numbers in inline hunks previews."
            }
          } },
        setup = <function 632>,
        setup_highlights = <function 633>
      },
      ibl = {
        debounced_refresh = <function 634>,
        initialized = false,
        overwrite = <function 635>,
        refresh = <function 636>,
        refresh_all = <function 637>,
        setup = <function 638>,
        setup_buffer = <function 639>,
        update = <function 640>
      },
      ["ibl.autocmds"] = {
        setup = <function 641>
      },
      ["ibl.config"] = {
        buffer_config = {},
        clear_buffer_config = <function 642>,
        default_config = {
          debounce = 200,
          enabled = true,
          exclude = {
            buftypes = { "terminal", "nofile", "quickfix", "prompt" },
            filetypes = { "lspinfo", "packer", "checkhealth", "help", "man", "gitcommit", "TelescopePrompt", "TelescopeResults", "" }
          },
          indent = {
            char = "▎",
            highlight = "IblIndent",
            priority = 1,
            repeat_linebreak = true,
            smart_indent_cap = true
          },
          scope = {
            enabled = true,
            exclude = {
              language = {},
              node_type = {
                ["*"] = { "source_file", "program" },
                lua = { "chunk" },
                python = { "module" }
              }
            },
            highlight = "IblScope",
            include = {
              node_type = {}
            },
            injected_languages = true,
            priority = 1024,
            show_end = true,
            show_exact_scope = false,
            show_start = true
          },
          viewport_buffer = {
            max = 500,
            min = 30
          },
          whitespace = {
            highlight = "IblWhitespace",
            remove_blankline_trail = true
          }
        },
        get_config = <function 643>,
        overwrite_config = <function 644>,
        set_buffer_config = <function 645>,
        set_config = <function 646>,
        update_config = <function 647>
      },
      ["ibl.highlights"] = {
        indent = {},
        scope = {},
        setup = <function 648>,
        whitespace = {}
      },
      ["ibl.hooks"] = {
        builtin = {
          hide_first_space_indent_level = <function 649>,
          hide_first_tab_indent_level = <function 650>,
          scope_highlight_from_extmark = <function 651>,
          skip_preproc_lines = <function 652>
        },
        clear = <function 653>,
        clear_all = <function 654>,
        get = <function 655>,
        register = <function 656>,
        type = {
          ACTIVE = "ACTIVE",
          CLEAR = "CLEAR",
          HIGHLIGHT_SETUP = "HIGHLIGHT_SETUP",
          SCOPE_ACTIVE = "SCOPE_ACTIVE",
          SCOPE_HIGHLIGHT = "SCOPE_HIGHLIGHT",
          SKIP_LINE = "SKIP_LINE",
          VIRTUAL_TEXT = "VIRTUAL_TEXT",
          WHITESPACE = "WHITESPACE"
        }
      },
      ["ibl.indent"] = {
        get = <function 657>,
        is_indent = <function 658>,
        is_space_indent = <function 659>,
        whitespace = {
          INDENT = 6,
          SPACE = 5,
          TAB_END = 4,
          TAB_FILL = 3,
          TAB_START = 1,
          TAB_START_SINGLE = 2
        }
      },
      ["ibl.inlay_hints"] = {
        clear = <function 660>,
        clear_buffer = <function 661>,
        set = <function 662>,
        setup = <function 663>
      },
      ["ibl.scope"] = {
        get = <function 664>,
        get_cursor_range = <function 665>,
        language_for_range = <function 666>
      },
      ["ibl.scope_languages"] = {
        ada = {
          block_statement = true,
          compilation = true,
          package_body = true,
          package_declaration = true,
          subprogram_body = true,
          subprogram_declaration = true
        },
        angular = <49>{
          element = true
        },
        arduino = <50>{
          body = true,
          catch_clause = true,
          class_specifier = true,
          compound_statement = true,
          for_statement = true,
          function_declarator = true,
          function_definition = true,
          if_statement = true,
          lambda_expression = true,
          preproc_function_def = true,
          requires_expression = true,
          struct_specifier = true,
          template_declaration = true,
          template_function = true,
          template_method = true,
          while_statement = true
        },
        astro = <table 49>,
        bash = {
          function_definition = true
        },
        bass = {
          cons = true,
          list = true,
          scope = true
        },
        bicep = {
          array = true,
          call_expression = true,
          for_statement = true,
          if_statement = true,
          infrastructure = true,
          interpolation = true,
          lambda_expression = true,
          object = true,
          subscript_expression = true
        },
        bitbake = {
          dictionary_comprehension = true,
          list_comprehension = true,
          python_function_definition = true,
          set_comprehension = true
        },
        c = <51>{
          compound_statement = true,
          for_statement = true,
          function_definition = true,
          if_statement = true,
          preproc_function_def = true,
          struct_specifier = true,
          while_statement = true
        },
        c_sharp = {
          block = true
        },
        cairo = {
          block = true,
          enum_item = true,
          function_definition = true,
          if_expression = true,
          impl_item = true,
          loop_expression = true,
          match_arm = true,
          match_expression = true,
          struct_item = true
        },
        capnp = {
          annotation_targets = true,
          const_list = true,
          enum = true,
          generics = true,
          group = true,
          implicit_generics = true,
          interface = true,
          message = true,
          method_parameters = true,
          named_return_types = true,
          struct = true,
          struct_shorthand = true,
          union = true
        },
        commonlisp = {
          defun = true,
          list_lit = true,
          loop_macro = true,
          sym_lit = true
        },
        corn = {
          array = true,
          object = true
        },
        cpon = {
          array = true,
          map = true,
          meta_map = true
        },
        cpp = <table 50>,
        cuda = <table 50>,
        cue = {
          field = true,
          for_clause = true
        },
        dart = {
          block = true,
          body = true,
          catch_clause = true,
          finally_clause = true,
          for_statement = true,
          if_statement = true,
          try_statement = true,
          while_statement = true
        },
        devicetree = {
          integer_cells = true,
          node = true
        },
        ecma = <52>{
          arrow_function = true,
          catch_clause = true,
          for_in_statement = true,
          for_statement = true,
          ["function"] = true,
          function_declaration = true,
          method_definition = true,
          statement_block = true
        },
        elixir = {
          call = true,
          stab_clause = true
        },
        elsa = {
          reduction = true
        },
        fennel = {
          each = true,
          fn = true,
          ["for"] = true,
          lambda = true,
          let = true,
          match = true
        },
        firrtl = {
          circuit = true,
          ["else"] = true,
          module = true,
          when = true
        },
        fish = {
          begin_statement = true,
          command = true,
          for_statement = true,
          function_definition = true,
          if_statement = true,
          switch_statement = true,
          while_statement = true
        },
        forth = {
          word_definition = true
        },
        fusion = {
          block = true,
          eel_arrow_function = true,
          eel_object = true
        },
        gdscript = {
          class_definition = true,
          constructor_definition = true,
          elif_clause = true,
          else_clause = true,
          for_statement = true,
          function_definition = true,
          get_body = true,
          if_statement = true,
          lambda = true,
          match_statement = true,
          pattern_section = true,
          set_body = true,
          while_statement = true
        },
        git_config = {
          section = true
        },
        gleam = {
          case_clause = true,
          function_body = true
        },
        glimmer = {
          block_statement = true,
          element_node = true
        },
        glsl = <table 51>,
        go = {
          block = true,
          expression_switch_statement = true,
          for_statement = true,
          func_literal = true,
          function_declaration = true,
          if_statement = true,
          method_declaration = true
        },
        godot_resource = {
          section = true
        },
        hare = {
          for_statement = true,
          function_declaration = true,
          if_statement = true,
          match_expression = true,
          module = true,
          switch_expression = true
        },
        heex = {
          component = true,
          slot = true,
          tag = true
        },
        hjson = <53>{
          array = true,
          object = true
        },
        hlsl = <table 50>,
        html = <table 49>,
        ispc = {
          compound_statement = true,
          for_statement = true,
          foreach_instance_statement = true,
          foreach_statement = true,
          function_definition = true,
          if_statement = true,
          preproc_function_def = true,
          struct_specifier = true,
          template_declaration = true,
          unmasked_statement = true,
          while_statement = true
        },
        java = {
          alternative = true,
          block = true,
          body = true,
          catch_clause = true,
          consequence = true,
          constructor_declaration = true,
          enhanced_for_statement = true,
          for_statement = true,
          if_statement = true,
          lambda_expression = true,
          method_declaration = true,
          try_statement = true
        },
        javascript = {
          arrow_function = true,
          catch_clause = true,
          for_in_statement = true,
          for_statement = true,
          ["function"] = true,
          function_declaration = true,
          jsx_element = true,
          method_definition = true,
          statement_block = true
        },
        json = <table 53>,
        jsonc = <table 53>,
        jsonnet = {
          anonymous_function = true,
          field = true,
          local_bind = true,
          object = true,
          parenthesis = true
        },
        julia = {
          catch_clause = true,
          do_clause = true,
          finally_clause = true,
          for_statement = true,
          function_definition = true,
          let_statement = true,
          macro_definition = true,
          quote_statement = true,
          short_function_definition = true,
          try_statement = true,
          while_statement = true
        },
        kconfig = {
          choice = true,
          comment_entry = true,
          config = true,
          ["if"] = true,
          menu = true,
          menuconfig = true
        },
        kdl = {
          node = true,
          node_children = true
        },
        kotlin = {
          anonymous_initializer = true,
          class_declaration = true,
          do_while_statement = true,
          enum_class_body = true,
          enum_entry = true,
          for_statement = true,
          function_declaration = true,
          if_expression = true,
          interpolated_expression = true,
          lambda_literal = true,
          primary_constructor = true,
          secondary_constructor = true,
          when_entry = true,
          when_expression = true,
          while_statement = true
        },
        lua = <54>{
          do_statement = true,
          for_statement = true,
          function_declaration = true,
          function_definition = true,
          if_statement = true,
          repeat_statement = true,
          while_statement = true
        },
        luau = <table 54>,
        matlab = {
          function_definition = true
        },
        mlir = {
          region = true
        },
        nim = {
          block = true,
          case = true,
          concept_declaration = true,
          converter_declaration = true,
          ["for"] = true,
          func_declaration = true,
          func_expression = true,
          ["if"] = true,
          iterator_declaration = true,
          iterator_expression = true,
          macro_declaration = true,
          method_declaration = true,
          proc_declaration = true,
          proc_expression = true,
          static_statement = true,
          template_declaration = true,
          try = true,
          ["while"] = true
        },
        nix = {
          function_expression = true,
          let_expression = true,
          rec_attrset_expression = true
        },
        nqc = <table 51>,
        objc = <table 51>,
        ocaml = <55>{
          attribute_payload = true,
          class_binding = true,
          class_function = true,
          compilation_unit = true,
          for_expression = true,
          fun_expression = true,
          functor = true,
          let_binding = true,
          let_class_expression = true,
          let_expression = true,
          match_case = true,
          method_definition = true,
          module_binding = true,
          object_expression = true,
          signature = true,
          structure = true
        },
        ocaml_interface = <table 55>,
        odin = {
          block = true,
          declaration = true,
          statement = true
        },
        pascal = {
          declProc = true,
          declProcRef = true,
          defProc = true,
          exceptionHandler = true,
          lambda = true,
          root = true
        },
        perl = {
          block = true,
          block_statement = true
        },
        php = {
          anonymous_function = true,
          class_declaration = true,
          function_definition = true,
          method_declaration = true
        },
        pony = {
          actor_definition = true,
          array_literal = true,
          behavior = true,
          case_statement = true,
          class_definition = true,
          constructor = true,
          else_block = true,
          elseif_block = true,
          elseiftype_block = true,
          for_statement = true,
          if_statement = true,
          iftype_statement = true,
          interface_definition = true,
          match_statement = true,
          method = true,
          object_literal = true,
          parenthesized_expression = true,
          primitive_definition = true,
          recover_statement = true,
          repeat_statement = true,
          struct_definition = true,
          trait_definition = true,
          try_statement = true,
          tuple_expression = true,
          use_statement = true,
          while_statement = true,
          with_statement = true
        },
        puppet = {
          array = true,
          attribute_type_entry = true,
          block = true,
          case_statement = true,
          class_definition = true,
          defined_resource_type = true,
          hash = true,
          method_call = true,
          node_definition = true,
          parameter_list = true,
          resource_declaration = true,
          selector = true
        },
        python = {
          class_definition = true,
          dictionary_comprehension = true,
          function_definition = true,
          list_comprehension = true,
          module = true,
          set_comprehension = true
        },
        ql = {
          body = true,
          conjunction = true,
          dataclass = true,
          datatype = true,
          module = true,
          select = true
        },
        query = {
          anonymous_node = true,
          grouping = true,
          named_node = true
        },
        r = {
          function_definition = true
        },
        rasi = {
          rule_set = true
        },
        re2c = {
          body = true
        },
        risor = {
          block = true,
          for_statement = true,
          function_declaration = true,
          if_statement = true,
          switch_statement = true
        },
        ron = {
          array = true,
          map = true,
          struct = true,
          tuple = true
        },
        rst = {
          directive = true
        },
        ruby = {
          block = true,
          class = true,
          do_block = true,
          method = true
        },
        rust = {
          block = true,
          closure_expression = true,
          enum_item = true,
          expression_statement = true,
          for_expression = true,
          function_item = true,
          if_expression = true,
          impl_item = true,
          loop_expression = true,
          match_arm = true,
          match_expression = true,
          struct_item = true,
          while_expression = true
        },
        scala = {
          block = true,
          function_definition = true,
          lambda_expression = true,
          template_body = true
        },
        smali = {
          annotation_directive = true,
          array_data_directive = true,
          class_directive = true,
          expression = true,
          method_definition = true,
          packed_switch_directive = true,
          sparse_switch_directive = true,
          subannotation_directive = true
        },
        sparql = {
          triples_block = true
        },
        squirrel = {
          anonymous_function = true,
          array = true,
          attribute_declaration = true,
          block = true,
          catch_statement = true,
          class_declaration = true,
          do_while_statement = true,
          else_statement = true,
          enum_declaration = true,
          for_statement = true,
          foreach_statement = true,
          function_declaration = true,
          if_statement = true,
          parenthesized_expression = true,
          script = true,
          switch_statement = true,
          table = true,
          try_statement = true,
          while_statement = true
        },
        starlark = {
          dictionary_comprehension = true,
          function_definition = true,
          list_comprehension = true,
          set_comprehension = true
        },
        supercollider = {
          code_block = true,
          control_structure = true,
          function_block = true,
          function_call = true
        },
        svelte = <table 49>,
        swift = {
          class_declaration = true,
          do_statement = true,
          for_statement = true,
          function_declaration = true,
          guard_statement = true,
          if_statement = true,
          property_declaration = true,
          protocol_declaration = true,
          repeat_while_statement = true,
          statements = true,
          switch_statement = true,
          while_statement = true
        },
        systemtap = {
          catch_clause = true,
          for_statement = true,
          foreach_statement = true,
          function_definition = true,
          if_statement = true,
          statement_block = true,
          while_statement = true
        },
        t32 = {
          block = true
        },
        tablegen = {
          class = true,
          def = true,
          defm = true,
          defset = true,
          defvar = true,
          foreach = true,
          ["if"] = true,
          let = true,
          multiclass = true
        },
        teal = {
          anon_function = true,
          do_statement = true,
          for_body = true,
          function_statement = true,
          if_statement = true,
          repeat_statement = true,
          while_body = true
        },
        thrift = {
          definition = true
        },
        tiger = {
          for_expression = true,
          function_declaration = true,
          let_expression = true
        },
        tlaplus = {
          bounded_quantification = true,
          choose = true,
          function_definition = true,
          function_literal = true,
          lambda = true,
          let_in = true,
          module = true,
          module_definition = true,
          non_terminal_proof = true,
          operator_definition = true,
          pcal_algorithm = true,
          pcal_macro = true,
          pcal_procedure = true,
          pcal_with = true,
          set_filter = true,
          set_map = true,
          suffices_proof_step = true,
          theorem = true,
          unbounded_quantification = true
        },
        toml = {
          table = true,
          table_array_element = true
        },
        tsx = {
          arrow_function = true,
          catch_clause = true,
          for_in_statement = true,
          for_statement = true,
          ["function"] = true,
          function_declaration = true,
          jsx_element = true,
          method_definition = true,
          statement_block = true
        },
        turlte = {
          turtle_doc = true
        },
        typescript = <table 52>,
        ungrammar = {
          grammar = true
        },
        usd = {
          block = true,
          metadata = true
        },
        uxntal = {
          macro = true,
          memory_execution = true,
          subroutine = true
        },
        v = {
          block = true,
          for_statement = true,
          function_declaration = true,
          if_expression = true
        },
        verilog = {
          always_construct = true,
          case_item = true,
          conditional_statement = true,
          function_declaration = true,
          loop_generate_construct = true,
          loop_statement = true,
          module_declaration = true
        },
        vim = {
          function_definition = true
        },
        vue = {
          element = true,
          template_element = true
        },
        wing = {
          block = true
        },
        yaml = {
          block_node = true
        },
        yuck = {
          array = true,
          ast_block = true,
          expr = true,
          json_array = true,
          json_object = true,
          list = true,
          parenthesized_expression = true
        }
      },
      ["ibl.utils"] = {
        encode = <function 667>,
        fix_horizontal_scroll = <function 668>,
        get_bufnr = <function 669>,
        get_filetypes = <function 670>,
        get_foldclosed = <function 671>,
        get_foldtextresult = <function 672>,
        get_listchars = <function 673>,
        get_offset = <function 674>,
        get_whitespace = <function 675>,
        get_win = <function 676>,
        gsplit = <function 677>,
        has_empty_foldtext = <function 678>,
        has_end = <function 679>,
        has_repeat_indent = <function 680>,
        is_buffer_active = <function 681>,
        split = <function 682>,
        tbl_contains = <function 683>,
        tbl_count = <function 684>,
        tbl_filter = <function 685>,
        tbl_get_index = <function 686>,
        tbl_join = <function 687>,
        tbl_map = <function 688>,
        utf8_encode = <function 689>,
        validate = <function 690>,
        validate_config = <function 691>
      },
      ["ibl.virt_text"] = {
        clear_buffer = <function 692>,
        get = <function 693>,
        get_char_map = <function 694>
      },
      io = <table 5>,
      jit = <table 6>,
      ["jit.opt"] = <table 7>,
      lazy = {
        _start = 45472627199611,
        bootstrap = <function 695>,
        plugins = <function 696>,
        setup = <function 697>,
        stats = <function 698>,
        <metatable> = {
          __index = <function 699>
        }
      },
      ["lazy.async"] = {
        Async = <56>{
          _emit = <function 700>,
          init = <function 701>,
          new = <function 702>,
          on = <function 703>,
          resume = <function 704>,
          running = <function 705>,
          sleep = <function 706>,
          step = <function 707>,
          suspend = <function 708>,
          wait = <function 709>,
          wake = <function 710>
        },
        BUDGET = 10,
        _active = {},
        _executor = <userdata 5>,
        _run = <function 711>,
        _suspended = {},
        _threads = {
          <metatable> = {
            __mode = "k"
          }
        },
        abort = <function 712>,
        add = <function 713>,
        debug = <function 714>,
        new = <function 702>,
        running = <function 715>,
        sleep = <function 716>,
        step = <function 717>,
        yield = <function 718>
      },
      ["lazy.core.cache"] = <57>{
        _inspect = <function 719>,
        _profile = <function 720>,
        disable = <function 721>,
        enable = <function 722>,
        enabled = true,
        find = <function 723>,
        path = "/home/grim/.cache/nvim/luac",
        reset = <function 724>
      },
      ["lazy.core.config"] = {
        defaults = {
          change_detection = <58>{
            enabled = true,
            notify = true
          },
          checker = <59>{
            check_pinned = false,
            enabled = false,
            frequency = 3600,
            notify = true
          },
          debug = false,
          defaults = <60>{
            lazy = false
          },
          dev = <61>{
            fallback = false,
            path = "/home/grim/projects",
            patterns = {}
          },
          diff = <62>{
            cmd = "git"
          },
          git = <63>{
            cooldown = 0,
            filter = true,
            log = { "-8" },
            throttle = {
              duration = 5000,
              enabled = false,
              rate = 2
            },
            timeout = 120,
            url_format = "https://github.com/%s.git"
          },
          headless = <64>{
            colors = true,
            log = true,
            process = true,
            task = true
          },
          install = <65>{
            colorscheme = { "habamax", "habamax" },
            missing = true
          },
          local_spec = true,
          lockfile = "/home/grim/.config/nvim/lazy-lock.json",
          performance = <66>{
            cache = {
              enabled = true
            },
            reset_packpath = true,
            rtp = {
              disabled_plugins = {},
              paths = {},
              reset = true
            }
          },
          pkg = <67>{
            cache = "/home/grim/.local/state/nvim/lazy/pkg-cache.lua",
            enabled = true,
            sources = { "lazy", "rockspec", "packspec" }
          },
          profiling = <68>{
            loader = false,
            require = false
          },
          readme = <69>{
            enabled = true,
            files = { "README.md", "lua/**/README.md" },
            root = "/home/grim/.local/state/nvim/lazy/readme",
            skip_if_doc_exists = true
          },
          rocks = <70>{
            enabled = true,
            root = "/home/grim/.local/share/nvim/lazy-rocks",
            server = "https://nvim-neorocks.github.io/rocks-binaries/"
          },
          root = "/home/grim/.local/share/nvim/lazy",
          state = "/home/grim/.local/state/nvim/lazy/state.json",
          ui = <71>{
            backdrop = 60,
            border = "none",
            custom_keys = {
              ["<localleader>i"] = { <function 725>,
                desc = "Inspect Plugin"
              },
              ["<localleader>l"] = { <function 726>,
                desc = "Open lazygit log"
              },
              ["<localleader>t"] = { <function 727>,
                desc = "Open terminal in plugin dir"
              }
            },
            icons = {
              cmd = " ",
              config = "",
              debug = "● ",
              event = " ",
              favorite = " ",
              ft = " ",
              import = " ",
              init = " ",
              keys = " ",
              lazy = "󰒲 ",
              list = { "●", "➜", "★", "‒" },
              loaded = "●",
              not_loaded = "○",
              plugin = " ",
              require = "󰢱 ",
              runtime = " ",
              source = " ",
              start = " ",
              task = "✔ "
            },
            pills = true,
            size = {
              height = 0.8,
              width = 0.8
            },
            throttle = 33.333333333333,
            title_pos = "center",
            wrap = true
          }
        },
        headless = <function 728>,
        hererocks = <function 729>,
        me = "/home/grim/.local/share/nvim/lazy/lazy.nvim",
        ns = 2,
        options = {
          change_detection = <table 58>,
          checker = <table 59>,
          debug = false,
          defaults = <table 60>,
          dev = <table 61>,
          diff = <table 62>,
          git = <table 63>,
          headless = <table 64>,
          install = <table 65>,
          local_spec = true,
          lockfile = "/home/grim/.config/nvim/lazy-lock.json",
          performance = <table 66>,
          pkg = <table 67>,
          profiling = <table 68>,
          readme = <table 69>,
          rocks = <table 70>,
          root = "/home/grim/.local/share/nvim/lazy",
          spec = { "nvim-lua/plenary.nvim", "github/copilot.vim", "jpalardy/vim-slime", "neovim/nvim-lspconfig", "hrsh7th/nvim-cmp", "hrsh7th/cmp-nvim-lsp", "hrsh7th/cmp-buffer", "hrsh7th/cmp-path", "hrsh7th/cmp-cmdline", "saadparwaiz1/cmp_luasnip", "zbirenbaum/copilot-cmp", "nvim-tree/nvim-tree.lua", "nvim-treesitter/nvim-treesitter", "nvim-telescope/telescope.nvim", "folke/which-key.nvim", "nvim-tree/nvim-web-devicons", "echasnovski/mini.icons", "nvim-treesitter/nvim-treesitter-textobjects", "nvim-treesitter/nvim-treesitter-context", "nvim-treesitter/playground", "p00f/nvim-ts-rainbow", "windwp/nvim-autopairs", "lewis6991/gitsigns.nvim", "lukas-reineke/indent-blankline.nvim", "rcarriga/nvim-notify", "goolord/alpha-nvim", "petertriho/nvim-scrollbar", "karb94/neoscroll.nvim", "NvChad/nvim-colorizer.lua", "windwp/nvim-autopairs", "phaazon/hop.nvim", "folke/trouble.nvim" },
          state = "/home/grim/.local/state/nvim/lazy/state.json",
          ui = <table 71>
        },
        plugins = <72>{
          ["alpha-nvim"] = <73>{
            _ = {
              frags = { 31 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 279367
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/alpha-nvim",
            lazy = false,
            name = "alpha-nvim",
            url = "https://github.com/goolord/alpha-nvim.git",
            <metatable> = {
              __index = <74>{ "goolord/alpha-nvim" }
            }
          },
          ["cmp-buffer"] = <75>{
            _ = {
              frags = { 12 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 121279
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/cmp-buffer",
            lazy = false,
            name = "cmp-buffer",
            url = "https://github.com/hrsh7th/cmp-buffer.git",
            <metatable> = {
              __index = <76>{ "hrsh7th/cmp-buffer" }
            }
          },
          ["cmp-cmdline"] = <77>{
            _ = {
              frags = { 14 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 51708
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/cmp-cmdline",
            lazy = false,
            name = "cmp-cmdline",
            url = "https://github.com/hrsh7th/cmp-cmdline.git",
            <metatable> = {
              __index = <78>{ "hrsh7th/cmp-cmdline" }
            }
          },
          ["cmp-nvim-lsp"] = <79>{
            _ = {
              frags = { 11 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 192633
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/cmp-nvim-lsp",
            lazy = false,
            name = "cmp-nvim-lsp",
            url = "https://github.com/hrsh7th/cmp-nvim-lsp.git",
            <metatable> = {
              __index = <80>{ "hrsh7th/cmp-nvim-lsp" }
            }
          },
          ["cmp-path"] = <81>{
            _ = {
              frags = { 13 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 118875
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/cmp-path",
            lazy = false,
            name = "cmp-path",
            url = "https://github.com/hrsh7th/cmp-path.git",
            <metatable> = {
              __index = <82>{ "hrsh7th/cmp-path" }
            }
          },
          cmp_luasnip = <83>{
            _ = {
              frags = { 15 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 80732
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/cmp_luasnip",
            lazy = false,
            name = "cmp_luasnip",
            url = "https://github.com/saadparwaiz1/cmp_luasnip.git",
            <metatable> = {
              __index = <84>{ "saadparwaiz1/cmp_luasnip" }
            }
          },
          ["copilot-cmp"] = <85>{
            _ = {
              frags = { 16 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 126699
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/copilot-cmp",
            lazy = false,
            name = "copilot-cmp",
            url = "https://github.com/zbirenbaum/copilot-cmp.git",
            <metatable> = {
              __index = <86>{ "zbirenbaum/copilot-cmp" }
            }
          },
          ["copilot.vim"] = <87>{
            _ = {
              frags = { 7 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 361131
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/copilot.vim",
            lazy = false,
            name = "copilot.vim",
            url = "https://github.com/github/copilot.vim.git",
            <metatable> = {
              __index = <88>{ "github/copilot.vim" }
            }
          },
          ["gitsigns.nvim"] = <89>{
            _ = {
              frags = { 28 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 1118701
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/gitsigns.nvim",
            lazy = false,
            name = "gitsigns.nvim",
            url = "https://github.com/lewis6991/gitsigns.nvim.git",
            <metatable> = {
              __index = <90>{ "lewis6991/gitsigns.nvim" }
            }
          },
          ["hop.nvim"] = <91>{
            _ = {
              frags = { 36 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 337377
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/hop.nvim",
            lazy = false,
            name = "hop.nvim",
            url = "https://github.com/phaazon/hop.nvim.git",
            <metatable> = {
              __index = <92>{ "phaazon/hop.nvim" }
            }
          },
          ["indent-blankline.nvim"] = <93>{
            _ = {
              frags = { 29 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 112703
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/indent-blankline.nvim",
            lazy = false,
            name = "indent-blankline.nvim",
            url = "https://github.com/lukas-reineke/indent-blankline.nvim.git",
            <metatable> = {
              __index = <94>{ "lukas-reineke/indent-blankline.nvim" }
            }
          },
          ["lazy.nvim"] = <95>{
            _ = {
              frags = { 38 },
              installed = true,
              loaded = {
                source = "init.lua",
                time = 1919971
              },
              top = true
            },
            config = <function 730>,
            dir = "/home/grim/.local/share/nvim/lazy/lazy.nvim",
            lazy = true,
            name = "lazy.nvim",
            url = "https://github.com/folke/lazy.nvim.git",
            <metatable> = {
              __index = <96>{ "folke/lazy.nvim" }
            }
          },
          ["mini.icons"] = <97>{
            _ = {
              frags = { 22 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 185701
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/mini.icons",
            lazy = false,
            name = "mini.icons",
            url = "https://github.com/echasnovski/mini.icons.git",
            <metatable> = {
              __index = <98>{ "echasnovski/mini.icons" }
            }
          },
          ["neoscroll.nvim"] = <99>{
            _ = {
              frags = { 33 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 173087
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/neoscroll.nvim",
            lazy = false,
            name = "neoscroll.nvim",
            url = "https://github.com/karb94/neoscroll.nvim.git",
            <metatable> = {
              __index = <100>{ "karb94/neoscroll.nvim" }
            }
          },
          ["nvim-autopairs"] = <101>{
            _ = {
              frags = { 27, 35 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 96762
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/nvim-autopairs",
            lazy = false,
            name = "nvim-autopairs",
            url = "https://github.com/windwp/nvim-autopairs.git",
            <metatable> = {
              __index = <102>{ "windwp/nvim-autopairs",
                <metatable> = {
                  __index = <103>{ "windwp/nvim-autopairs" }
                }
              }
            }
          },
          ["nvim-cmp"] = <104>{
            _ = {
              frags = { 10 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 1302678
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/nvim-cmp",
            lazy = false,
            name = "nvim-cmp",
            url = "https://github.com/hrsh7th/nvim-cmp.git",
            <metatable> = {
              __index = <105>{ "hrsh7th/nvim-cmp" }
            }
          },
          ["nvim-colorizer.lua"] = <106>{
            _ = {
              frags = { 34 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 141897
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/nvim-colorizer.lua",
            lazy = false,
            name = "nvim-colorizer.lua",
            url = "https://github.com/NvChad/nvim-colorizer.lua.git",
            <metatable> = {
              __index = <107>{ "NvChad/nvim-colorizer.lua" }
            }
          },
          ["nvim-lspconfig"] = <108>{
            _ = {
              frags = { 9 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 3560035
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/nvim-lspconfig",
            lazy = false,
            name = "nvim-lspconfig",
            url = "https://github.com/neovim/nvim-lspconfig.git",
            <metatable> = {
              __index = <109>{ "neovim/nvim-lspconfig" }
            }
          },
          ["nvim-notify"] = <110>{
            _ = {
              frags = { 30 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 89058
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/nvim-notify",
            lazy = false,
            name = "nvim-notify",
            url = "https://github.com/rcarriga/nvim-notify.git",
            <metatable> = {
              __index = <111>{ "rcarriga/nvim-notify" }
            }
          },
          ["nvim-scrollbar"] = <112>{
            _ = {
              frags = { 32 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 162958
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/nvim-scrollbar",
            lazy = false,
            name = "nvim-scrollbar",
            url = "https://github.com/petertriho/nvim-scrollbar.git",
            <metatable> = {
              __index = <113>{ "petertriho/nvim-scrollbar" }
            }
          },
          ["nvim-tree.lua"] = <114>{
            _ = {
              frags = { 17 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 30007
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/nvim-tree.lua",
            lazy = false,
            name = "nvim-tree.lua",
            url = "https://github.com/nvim-tree/nvim-tree.lua.git",
            <metatable> = {
              __index = <115>{ "nvim-tree/nvim-tree.lua" }
            }
          },
          ["nvim-treesitter"] = <116>{
            _ = {
              frags = { 18 },
              handlers = {},
              installed = true,
              loaded = {
                plugin = "nvim-treesitter-textobjects",
                require = "nvim-treesitter.configs",
                time = 2766689
              },
              rtp_loaded = true,
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/nvim-treesitter",
            lazy = false,
            name = "nvim-treesitter",
            url = "https://github.com/nvim-treesitter/nvim-treesitter.git",
            <metatable> = {
              __index = <117>{ "nvim-treesitter/nvim-treesitter" }
            }
          },
          ["nvim-treesitter-context"] = <118>{
            _ = {
              frags = { 24 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 375569
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/nvim-treesitter-context",
            lazy = false,
            name = "nvim-treesitter-context",
            url = "https://github.com/nvim-treesitter/nvim-treesitter-context.git",
            <metatable> = {
              __index = <119>{ "nvim-treesitter/nvim-treesitter-context" }
            }
          },
          ["nvim-treesitter-textobjects"] = <120>{
            _ = {
              frags = { 23 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 4511160
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/nvim-treesitter-textobjects",
            lazy = false,
            name = "nvim-treesitter-textobjects",
            url = "https://github.com/nvim-treesitter/nvim-treesitter-textobjects.git",
            <metatable> = {
              __index = <121>{ "nvim-treesitter/nvim-treesitter-textobjects" }
            }
          },
          ["nvim-ts-rainbow"] = <122>{
            _ = {
              frags = { 26 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 559045
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/nvim-ts-rainbow",
            lazy = false,
            name = "nvim-ts-rainbow",
            url = "https://github.com/p00f/nvim-ts-rainbow.git",
            <metatable> = {
              __index = <123>{ "p00f/nvim-ts-rainbow" }
            }
          },
          ["nvim-web-devicons"] = <124>{
            _ = {
              frags = { 21 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 103495
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/nvim-web-devicons",
            lazy = false,
            name = "nvim-web-devicons",
            url = "https://github.com/nvim-tree/nvim-web-devicons.git",
            <metatable> = {
              __index = <125>{ "nvim-tree/nvim-web-devicons" }
            }
          },
          playground = <126>{
            _ = {
              frags = { 25 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 593940
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/playground",
            lazy = false,
            name = "playground",
            url = "https://github.com/nvim-treesitter/playground.git",
            <metatable> = {
              __index = <127>{ "nvim-treesitter/playground" }
            }
          },
          ["plenary.nvim"] = <128>{
            _ = {
              frags = { 2, 1, 5, 6 },
              handlers = {},
              installed = true,
              pkg = <129>{
                dir = "/home/grim/.local/share/nvim/lazy/plenary.nvim",
                file = "community",
                name = "plenary.nvim",
                source = "lazy",
                spec = <130>{ "plenary.nvim",
                  optional = true,
                  specs = <131>{ "nvim-lua/plenary.nvim",
                    lazy = true,
                    optional = true
                  },
                  <metatable> = {
                    __index = <table 131>
                  }
                }
              },
              top = false
            },
            dir = "/home/grim/.local/share/nvim/lazy/plenary.nvim",
            name = "plenary.nvim",
            optional = false,
            url = "https://github.com/nvim-lua/plenary.nvim.git",
            <metatable> = {
              __index = <132>{ "nvim-lua/plenary.nvim",
                <metatable> = {
                  __index = <133>{ "nvim-lua/plenary.nvim",
                    lazy = true,
                    <metatable> = {
                      __index = <table 130>
                    }
                  }
                }
              }
            }
          },
          ["telescope.nvim"] = <134>{
            _ = {
              frags = { 4, 3, 19 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 295437
              },
              pkg = <135>{
                dir = "/home/grim/.local/share/nvim/lazy/telescope.nvim",
                file = "telescope.nvim-scm-1.rockspec",
                name = "telescope.nvim",
                source = "rockspec",
                spec = <136>{ "telescope.nvim",
                  optional = true,
                  specs = <137>{ "telescope.nvim",
                    build = false,
                    optional = true,
                    specs = { <table 133> }
                  },
                  <metatable> = {
                    __index = <table 137>
                  }
                }
              },
              top = false
            },
            dir = "/home/grim/.local/share/nvim/lazy/telescope.nvim",
            lazy = false,
            name = "telescope.nvim",
            optional = false,
            url = "https://github.com/nvim-telescope/telescope.nvim.git",
            <metatable> = {
              __index = <138>{ "nvim-telescope/telescope.nvim",
                <metatable> = {
                  __index = <table 136>
                }
              }
            }
          },
          ["trouble.nvim"] = <139>{
            _ = {
              frags = { 37 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 290508
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/trouble.nvim",
            lazy = false,
            name = "trouble.nvim",
            url = "https://github.com/folke/trouble.nvim.git",
            <metatable> = {
              __index = <140>{ "folke/trouble.nvim" }
            }
          },
          ["vim-slime"] = <141>{
            _ = {
              frags = { 8 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 455449
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/vim-slime",
            lazy = false,
            name = "vim-slime",
            url = "https://github.com/jpalardy/vim-slime.git",
            <metatable> = {
              __index = <142>{ "jpalardy/vim-slime" }
            }
          },
          ["which-key.nvim"] = <143>{
            _ = {
              frags = { 20 },
              handlers = {},
              installed = true,
              loaded = {
                start = "start",
                time = 79661
              },
              top = true
            },
            dir = "/home/grim/.local/share/nvim/lazy/which-key.nvim",
            lazy = false,
            name = "which-key.nvim",
            url = "https://github.com/folke/which-key.nvim.git",
            <metatable> = {
              __index = <144>{ "folke/which-key.nvim" }
            }
          }
        },
        setup = <function 731>,
        spec = <145>{
          disabled = {},
          ignore_installed = {},
          meta = {
            dirty = {},
            frag_to_meta = { <table 128>, <table 128>, <table 134>, <table 134>, <table 128>, <table 128>, <table 87>, <table 141>, <table 108>, <table 104>, <table 79>, <table 75>, <table 81>, <table 77>, <table 83>, <table 85>, <table 114>, <table 116>, <table 134>, <table 143>, <table 124>, <table 97>, <table 120>, <table 118>, <table 126>, <table 122>, <table 101>, <table 89>, <table 93>, <table 110>, <table 73>, <table 112>, <table 99>, <table 106>, <table 101>, <table 91>, <table 139>, <table 95> },
            fragments = {
              dep_stack = {},
              dirty = {},
              frag_stack = {},
              fragments = { {
                  frags = { 2 },
                  id = 1,
                  name = "plenary.nvim",
                  spec = <table 130>
                }, {
                  id = 2,
                  name = "plenary.nvim",
                  pid = 1,
                  spec = <table 131>,
                  url = "https://github.com/nvim-lua/plenary.nvim.git"
                }, {
                  frags = { 4 },
                  id = 3,
                  name = "telescope.nvim",
                  spec = <table 136>
                }, {
                  frags = { 5 },
                  id = 4,
                  name = "telescope.nvim",
                  pid = 3,
                  spec = <table 137>
                }, {
                  id = 5,
                  name = "plenary.nvim",
                  pid = 4,
                  spec = <table 133>,
                  url = "https://github.com/nvim-lua/plenary.nvim.git"
                }, {
                  id = 6,
                  name = "plenary.nvim",
                  spec = <table 132>,
                  url = "https://github.com/nvim-lua/plenary.nvim.git"
                }, {
                  id = 7,
                  name = "copilot.vim",
                  spec = <table 88>,
                  url = "https://github.com/github/copilot.vim.git"
                }, {
                  id = 8,
                  name = "vim-slime",
                  spec = <table 142>,
                  url = "https://github.com/jpalardy/vim-slime.git"
                }, {
                  id = 9,
                  name = "nvim-lspconfig",
                  spec = <table 109>,
                  url = "https://github.com/neovim/nvim-lspconfig.git"
                }, {
                  id = 10,
                  name = "nvim-cmp",
                  spec = <table 105>,
                  url = "https://github.com/hrsh7th/nvim-cmp.git"
                }, {
                  id = 11,
                  name = "cmp-nvim-lsp",
                  spec = <table 80>,
                  url = "https://github.com/hrsh7th/cmp-nvim-lsp.git"
                }, {
                  id = 12,
                  name = "cmp-buffer",
                  spec = <table 76>,
                  url = "https://github.com/hrsh7th/cmp-buffer.git"
                }, {
                  id = 13,
                  name = "cmp-path",
                  spec = <table 82>,
                  url = "https://github.com/hrsh7th/cmp-path.git"
                }, {
                  id = 14,
                  name = "cmp-cmdline",
                  spec = <table 78>,
                  url = "https://github.com/hrsh7th/cmp-cmdline.git"
                }, {
                  id = 15,
                  name = "cmp_luasnip",
                  spec = <table 84>,
                  url = "https://github.com/saadparwaiz1/cmp_luasnip.git"
                }, {
                  id = 16,
                  name = "copilot-cmp",
                  spec = <table 86>,
                  url = "https://github.com/zbirenbaum/copilot-cmp.git"
                }, {
                  id = 17,
                  name = "nvim-tree.lua",
                  spec = <table 115>,
                  url = "https://github.com/nvim-tree/nvim-tree.lua.git"
                }, {
                  id = 18,
                  name = "nvim-treesitter",
                  spec = <table 117>,
                  url = "https://github.com/nvim-treesitter/nvim-treesitter.git"
                }, {
                  id = 19,
                  name = "telescope.nvim",
                  spec = <table 138>,
                  url = "https://github.com/nvim-telescope/telescope.nvim.git"
                }, {
                  id = 20,
                  name = "which-key.nvim",
                  spec = <table 144>,
                  url = "https://github.com/folke/which-key.nvim.git"
                }, {
                  id = 21,
                  name = "nvim-web-devicons",
                  spec = <table 125>,
                  url = "https://github.com/nvim-tree/nvim-web-devicons.git"
                }, {
                  id = 22,
                  name = "mini.icons",
                  spec = <table 98>,
                  url = "https://github.com/echasnovski/mini.icons.git"
                }, {
                  id = 23,
                  name = "nvim-treesitter-textobjects",
                  spec = <table 121>,
                  url = "https://github.com/nvim-treesitter/nvim-treesitter-textobjects.git"
                }, {
                  id = 24,
                  name = "nvim-treesitter-context",
                  spec = <table 119>,
                  url = "https://github.com/nvim-treesitter/nvim-treesitter-context.git"
                }, {
                  id = 25,
                  name = "playground",
                  spec = <table 127>,
                  url = "https://github.com/nvim-treesitter/playground.git"
                }, {
                  id = 26,
                  name = "nvim-ts-rainbow",
                  spec = <table 123>,
                  url = "https://github.com/p00f/nvim-ts-rainbow.git"
                }, {
                  id = 27,
                  name = "nvim-autopairs",
                  spec = <table 103>,
                  url = "https://github.com/windwp/nvim-autopairs.git"
                }, {
                  id = 28,
                  name = "gitsigns.nvim",
                  spec = <table 90>,
                  url = "https://github.com/lewis6991/gitsigns.nvim.git"
                }, {
                  id = 29,
                  name = "indent-blankline.nvim",
                  spec = <table 94>,
                  url = "https://github.com/lukas-reineke/indent-blankline.nvim.git"
                }, {
                  id = 30,
                  name = "nvim-notify",
                  spec = <table 111>,
                  url = "https://github.com/rcarriga/nvim-notify.git"
                }, {
                  id = 31,
                  name = "alpha-nvim",
                  spec = <table 74>,
                  url = "https://github.com/goolord/alpha-nvim.git"
                }, {
                  id = 32,
                  name = "nvim-scrollbar",
                  spec = <table 113>,
                  url = "https://github.com/petertriho/nvim-scrollbar.git"
                }, {
                  id = 33,
                  name = "neoscroll.nvim",
                  spec = <table 100>,
                  url = "https://github.com/karb94/neoscroll.nvim.git"
                }, {
                  id = 34,
                  name = "nvim-colorizer.lua",
                  spec = <table 107>,
                  url = "https://github.com/NvChad/nvim-colorizer.lua.git"
                }, {
                  id = 35,
                  name = "nvim-autopairs",
                  spec = <table 102>,
                  url = "https://github.com/windwp/nvim-autopairs.git"
                }, {
                  id = 36,
                  name = "hop.nvim",
                  spec = <table 92>,
                  url = "https://github.com/phaazon/hop.nvim.git"
                }, {
                  id = 37,
                  name = "trouble.nvim",
                  spec = <table 140>,
                  url = "https://github.com/folke/trouble.nvim.git"
                }, {
                  id = 38,
                  name = "lazy.nvim",
                  spec = <table 96>,
                  url = "https://github.com/folke/lazy.nvim.git"
                } },
              plugins = {
                [<table 127>] = 25,
                [<table 133>] = 5,
                [<table 132>] = 6,
                [<table 88>] = 7,
                [<table 131>] = 2,
                [<table 136>] = 3,
                [<table 111>] = 30,
                [<table 82>] = 13,
                [<table 137>] = 4,
                [<table 117>] = 18,
                [<table 138>] = 19,
                [<table 119>] = 24,
                [<table 123>] = 26,
                [<table 130>] = 1,
                [<table 121>] = 23,
                [<table 144>] = 20,
                [<table 98>] = 22,
                [<table 94>] = 29,
                [<table 90>] = 28,
                [<table 109>] = 9,
                [<table 105>] = 10,
                [<table 115>] = 17,
                [<table 140>] = 37,
                [<table 86>] = 16,
                [<table 102>] = 35,
                [<table 84>] = 15,
                [<table 103>] = 27,
                [<table 74>] = 31,
                [<table 142>] = 8,
                [<table 107>] = 34,
                [<table 92>] = 36,
                [<table 125>] = 21,
                [<table 100>] = 33,
                [<table 96>] = 38,
                [<table 76>] = 12,
                [<table 80>] = 11,
                [<table 78>] = 14,
                [<table 113>] = 32
              },
              spec = <table 145>,
              <metatable> = {
                __index = <146>{
                  _fid = 38,
                  add = <function 732>,
                  del = <function 733>,
                  get = <function 734>,
                  new = <function 735>
                }
              }
            },
            pkgs = {
              ["/home/grim/.local/share/nvim/lazy/plenary.nvim"] = 1,
              ["/home/grim/.local/share/nvim/lazy/telescope.nvim"] = 3
            },
            plugins = <table 72>,
            spec = <table 145>,
            str_to_meta = {
              ["https://github.com/NvChad/nvim-colorizer.lua.git"] = <table 106>,
              ["https://github.com/echasnovski/mini.icons.git"] = <table 97>,
              ["https://github.com/folke/lazy.nvim.git"] = <table 95>,
              ["https://github.com/folke/trouble.nvim.git"] = <table 139>,
              ["https://github.com/folke/which-key.nvim.git"] = <table 143>,
              ["https://github.com/github/copilot.vim.git"] = <table 87>,
              ["https://github.com/goolord/alpha-nvim.git"] = <table 73>,
              ["https://github.com/hrsh7th/cmp-buffer.git"] = <table 75>,
              ["https://github.com/hrsh7th/cmp-cmdline.git"] = <table 77>,
              ["https://github.com/hrsh7th/cmp-nvim-lsp.git"] = <table 79>,
              ["https://github.com/hrsh7th/cmp-path.git"] = <table 81>,
              ["https://github.com/hrsh7th/nvim-cmp.git"] = <table 104>,
              ["https://github.com/jpalardy/vim-slime.git"] = <table 141>,
              ["https://github.com/karb94/neoscroll.nvim.git"] = <table 99>,
              ["https://github.com/lewis6991/gitsigns.nvim.git"] = <table 89>,
              ["https://github.com/lukas-reineke/indent-blankline.nvim.git"] = <table 93>,
              ["https://github.com/neovim/nvim-lspconfig.git"] = <table 108>,
              ["https://github.com/nvim-lua/plenary.nvim.git"] = <table 128>,
              ["https://github.com/nvim-tree/nvim-tree.lua.git"] = <table 114>,
              ["https://github.com/nvim-tree/nvim-web-devicons.git"] = <table 124>,
              ["https://github.com/nvim-treesitter/nvim-treesitter-context.git"] = <table 118>,
              ["https://github.com/nvim-treesitter/nvim-treesitter-textobjects.git"] = <table 120>,
              ["https://github.com/nvim-treesitter/nvim-treesitter.git"] = <table 116>,
              ["https://github.com/nvim-treesitter/playground.git"] = <table 126>,
              ["https://github.com/p00f/nvim-ts-rainbow.git"] = <table 122>,
              ["https://github.com/petertriho/nvim-scrollbar.git"] = <table 112>,
              ["https://github.com/phaazon/hop.nvim.git"] = <table 91>,
              ["https://github.com/rcarriga/nvim-notify.git"] = <table 110>,
              ["https://github.com/saadparwaiz1/cmp_luasnip.git"] = <table 83>,
              ["https://github.com/windwp/nvim-autopairs.git"] = <table 101>,
              ["https://github.com/zbirenbaum/copilot-cmp.git"] = <table 85>
            },
            <metatable> = {
              __index = <147>{
                _rebuild = <function 736>,
                add = <function 737>,
                del = <function 738>,
                disable = <function 739>,
                fix_cond = <function 740>,
                fix_disabled = <function 741>,
                fix_optional = <function 742>,
                fix_pkgs = <function 743>,
                load_pkgs = <function 744>,
                new = <function 745>,
                rebuild = <function 746>,
                resolve = <function 747>
              }
            }
          },
          modules = {},
          notifs = {},
          <metatable> = <148>{
            __index = <function 748>,
            error = <function 749>,
            get_name = <function 750>,
            import = <function 751>,
            log = <function 752>,
            new = <function 753>,
            normalize = <function 754>,
            parse = <function 755>,
            report = <function 756>,
            warn = <function 757>
          }
        },
        suspended = false,
        to_clean = {},
        version = "11.17.1"
      },
      ["lazy.core.fragments"] = <table 146>,
      ["lazy.core.handler"] = <149>{
        _add = <function 758>,
        _del = <function 759>,
        _parse = <function 760>,
        _values = <function 761>,
        add = <function 762>,
        del = <function 763>,
        did_setup = true,
        disable = <function 764>,
        enable = <function 765>,
        handlers = {
          cmd = {
            active = {},
            managed = {},
            super = <table 149>,
            type = "cmd",
            <metatable> = {
              __index = <150>{
                _add = <function 766>,
                _del = <function 767>,
                _load = <function 768>,
                <metatable> = {
                  __index = <table 149>
                }
              }
            }
          },
          event = {
            active = {},
            managed = {},
            super = <table 149>,
            type = "event",
            <metatable> = {
              __index = <151>{
                _add = <function 769>,
                _parse = <function 770>,
                _trigger = <function 771>,
                get_augroups = <function 772>,
                get_state = <function 773>,
                group = 8,
                mappings = {
                  ["User VeryLazy"] = <152>{
                    event = "User",
                    id = "VeryLazy",
                    pattern = "VeryLazy"
                  },
                  VeryLazy = <table 152>
                },
                trigger = <function 774>,
                triggers = {
                  BufReadPost = "BufReadPre",
                  FileType = "BufReadPost"
                },
                <metatable> = {
                  __index = <table 149>
                }
              }
            }
          },
          ft = {
            active = {},
            managed = {},
            super = <table 151>,
            type = "ft",
            <metatable> = {
              __index = <153>{
                _parse = <function 775>,
                add = <function 776>,
                extends = <table 151>,
                <metatable> = {
                  __index = <table 151>
                }
              }
            }
          },
          keys = {
            active = {},
            managed = {},
            super = <table 149>,
            type = "keys",
            <metatable> = {
              __index = <154>{
                _add = <function 777>,
                _del = <function 778>,
                _set = <function 779>,
                _values = <function 780>,
                have = <function 781>,
                is_nop = <function 782>,
                opts = <function 783>,
                parse = <function 784>,
                resolve = <function 785>,
                to_string = <function 786>,
                <metatable> = {
                  __index = <table 149>
                }
              }
            }
          }
        },
        init = <function 787>,
        new = <function 788>,
        resolve = <function 789>,
        setup = <function 790>,
        types = {
          cmd = "cmd",
          event = "event",
          ft = "ft",
          keys = "keys"
        }
      },
      ["lazy.core.handler.cmd"] = <table 150>,
      ["lazy.core.handler.event"] = <table 151>,
      ["lazy.core.handler.ft"] = <table 153>,
      ["lazy.core.handler.keys"] = <table 154>,
      ["lazy.core.loader"] = {
        _load = <function 791>,
        add_to_luapath = <function 792>,
        add_to_rtp = <function 793>,
        auto_load = <function 794>,
        colorscheme = <function 795>,
        config = <function 796>,
        deactivate = <function 797>,
        did_ftdetect = {
          ["/home/grim/.config/nvim"] = "/home/grim/.config/nvim",
          ["/home/grim/.local/share/nvim/lazy/alpha-nvim"] = "/home/grim/.local/share/nvim/lazy/alpha-nvim",
          ["/home/grim/.local/share/nvim/lazy/cmp-buffer"] = "/home/grim/.local/share/nvim/lazy/cmp-buffer",
          ["/home/grim/.local/share/nvim/lazy/cmp-cmdline"] = "/home/grim/.local/share/nvim/lazy/cmp-cmdline",
          ["/home/grim/.local/share/nvim/lazy/cmp-nvim-lsp"] = "/home/grim/.local/share/nvim/lazy/cmp-nvim-lsp",
          ["/home/grim/.local/share/nvim/lazy/cmp-path"] = "/home/grim/.local/share/nvim/lazy/cmp-path",
          ["/home/grim/.local/share/nvim/lazy/cmp_luasnip"] = "/home/grim/.local/share/nvim/lazy/cmp_luasnip",
          ["/home/grim/.local/share/nvim/lazy/copilot-cmp"] = "/home/grim/.local/share/nvim/lazy/copilot-cmp",
          ["/home/grim/.local/share/nvim/lazy/copilot.vim"] = "/home/grim/.local/share/nvim/lazy/copilot.vim",
          ["/home/grim/.local/share/nvim/lazy/gitsigns.nvim"] = "/home/grim/.local/share/nvim/lazy/gitsigns.nvim",
          ["/home/grim/.local/share/nvim/lazy/hop.nvim"] = "/home/grim/.local/share/nvim/lazy/hop.nvim",
          ["/home/grim/.local/share/nvim/lazy/indent-blankline.nvim"] = "/home/grim/.local/share/nvim/lazy/indent-blankline.nvim",
          ["/home/grim/.local/share/nvim/lazy/lazy.nvim"] = "/home/grim/.local/share/nvim/lazy/lazy.nvim",
          ["/home/grim/.local/share/nvim/lazy/mini.icons"] = "/home/grim/.local/share/nvim/lazy/mini.icons",
          ["/home/grim/.local/share/nvim/lazy/neoscroll.nvim"] = "/home/grim/.local/share/nvim/lazy/neoscroll.nvim",
          ["/home/grim/.local/share/nvim/lazy/nvim-autopairs"] = "/home/grim/.local/share/nvim/lazy/nvim-autopairs",
          ["/home/grim/.local/share/nvim/lazy/nvim-cmp"] = "/home/grim/.local/share/nvim/lazy/nvim-cmp",
          ["/home/grim/.local/share/nvim/lazy/nvim-colorizer.lua"] = "/home/grim/.local/share/nvim/lazy/nvim-colorizer.lua",
          ["/home/grim/.local/share/nvim/lazy/nvim-lspconfig"] = "/home/grim/.local/share/nvim/lazy/nvim-lspconfig",
          ["/home/grim/.local/share/nvim/lazy/nvim-notify"] = "/home/grim/.local/share/nvim/lazy/nvim-notify",
          ["/home/grim/.local/share/nvim/lazy/nvim-scrollbar"] = "/home/grim/.local/share/nvim/lazy/nvim-scrollbar",
          ["/home/grim/.local/share/nvim/lazy/nvim-tree.lua"] = "/home/grim/.local/share/nvim/lazy/nvim-tree.lua",
          ["/home/grim/.local/share/nvim/lazy/nvim-treesitter"] = "/home/grim/.local/share/nvim/lazy/nvim-treesitter",
          ["/home/grim/.local/share/nvim/lazy/nvim-treesitter-context"] = "/home/grim/.local/share/nvim/lazy/nvim-treesitter-context",
          ["/home/grim/.local/share/nvim/lazy/nvim-treesitter-textobjects"] = "/home/grim/.local/share/nvim/lazy/nvim-treesitter-textobjects",
          ["/home/grim/.local/share/nvim/lazy/nvim-ts-rainbow"] = "/home/grim/.local/share/nvim/lazy/nvim-ts-rainbow",
          ["/home/grim/.local/share/nvim/lazy/nvim-web-devicons"] = "/home/grim/.local/share/nvim/lazy/nvim-web-devicons",
          ["/home/grim/.local/share/nvim/lazy/playground"] = "/home/grim/.local/share/nvim/lazy/playground",
          ["/home/grim/.local/share/nvim/lazy/telescope.nvim"] = "/home/grim/.local/share/nvim/lazy/telescope.nvim",
          ["/home/grim/.local/share/nvim/lazy/trouble.nvim"] = "/home/grim/.local/share/nvim/lazy/trouble.nvim",
          ["/home/grim/.local/share/nvim/lazy/vim-slime"] = "/home/grim/.local/share/nvim/lazy/vim-slime",
          ["/home/grim/.local/share/nvim/lazy/which-key.nvim"] = "/home/grim/.local/share/nvim/lazy/which-key.nvim",
          ["/home/grim/.local/share/nvim/site"] = "/home/grim/.local/share/nvim/site",
          ["/home/grim/.local/state/nvim/lazy/readme"] = "/home/grim/.local/state/nvim/lazy/readme",
          ["/usr/lib64/nvim"] = "/usr/lib64/nvim",
          ["/usr/share/nvim/runtime"] = "/usr/share/nvim/runtime"
        },
        did_handlers = true,
        disable_rtp_plugin = <function 798>,
        disabled_rtp_plugins = {
          packer_compiled = true
        },
        ftdetect = <function 799>,
        get_main = <function 800>,
        get_start_plugins = <function 801>,
        init_done = true,
        install_missing = <function 802>,
        load = <function 803>,
        loader = <function 804>,
        loading = {},
        packadd = <function 805>,
        reload = <function 806>,
        setup = <function 807>,
        source = <function 808>,
        source_runtime = <function 809>,
        startup = <function 810>
      },
      ["lazy.core.meta"] = <table 147>,
      ["lazy.core.plugin"] = {
        LOCAL_SPEC = ".lazy.lua",
        Spec = <table 148>,
        _values = <function 811>,
        find = <function 812>,
        find_local_spec = <function 813>,
        has_errors = <function 814>,
        load = <function 815>,
        loading = false,
        update_rocks_state = <function 816>,
        update_state = <function 817>,
        values = <function 818>
      },
      ["lazy.core.util"] = <155>{
        _profiles = { { { {
                data = "module",
                time = 612325
              }, {
                data = "config",
                time = 109947
              }, { {
                  data = "pkg",
                  time = 36769
                }, {
                  data = "resolve plugins",
                  time = 85140
                },
                data = "spec",
                time = 630890
              }, {
                data = "state",
                time = 111971
              }, {
                data = "install",
                time = 18956
              }, {
                data = "handlers",
                time = 59803
              },
              data = {
                plugin = "lazy.nvim"
              },
              time = 1919971
            }, { {
                data = {
                  runtime = "/usr/share/nvim/runtime/filetype.lua"
                },
                time = 163488
              }, {
                data = {
                  start = "init"
                },
                time = 1814
              }, { { {
                    data = {
                      runtime = "/home/grim/.local/share/nvim/lazy/which-key.nvim/plugin/which-key.lua"
                    },
                    time = 44474
                  },
                  data = {
                    plugin = "which-key.nvim",
                    start = "start"
                  },
                  time = 79661
                }, {
                  data = {
                    plugin = "nvim-notify",
                    start = "start"
                  },
                  time = 89058
                }, { {
                    data = {
                      runtime = "/home/grim/.local/share/nvim/lazy/gitsigns.nvim/plugin/gitsigns.lua"
                    },
                    time = 1023430
                  },
                  data = {
                    plugin = "gitsigns.nvim",
                    start = "start"
                  },
                  time = 1118701
                }, {
                  data = {
                    plugin = "cmp-cmdline",
                    start = "start"
                  },
                  time = 51708
                }, {
                  data = {
                    plugin = "cmp-path",
                    start = "start"
                  },
                  time = 118875
                }, {
                  data = {
                    plugin = "nvim-autopairs",
                    start = "start"
                  },
                  time = 96762
                }, {
                  data = {
                    plugin = "cmp-buffer",
                    start = "start"
                  },
                  time = 121279
                }, { {
                    data = {
                      runtime = "/home/grim/.local/share/nvim/lazy/telescope.nvim/plugin/telescope.lua"
                    },
                    time = 171353
                  },
                  data = {
                    plugin = "telescope.nvim",
                    start = "start"
                  },
                  time = 295437
                }, {
                  data = {
                    plugin = "indent-blankline.nvim",
                    start = "start"
                  },
                  time = 112703
                }, { { { {
                        data = {
                          runtime = "/home/grim/.local/share/nvim/lazy/nvim-treesitter/plugin/nvim-treesitter.lua"
                        },
                        time = 2725952
                      },
                      data = {
                        plugin = "nvim-treesitter"
                      },
                      time = 2766689
                    },
                    data = {
                      runtime = "/home/grim/.local/share/nvim/lazy/nvim-treesitter-textobjects/plugin/nvim-treesitter-textobjects.vim"
                    },
                    time = 4352801
                  },
                  data = {
                    plugin = "nvim-treesitter-textobjects",
                    start = "start"
                  },
                  time = 4511160
                }, { {
                    data = {
                      runtime = "/home/grim/.local/share/nvim/lazy/nvim-ts-rainbow/plugin/rainbow.vim"
                    },
                    time = 486228
                  },
                  data = {
                    plugin = "nvim-ts-rainbow",
                    start = "start"
                  },
                  time = 559045
                }, {
                  data = {
                    plugin = "nvim-tree.lua",
                    start = "start"
                  },
                  time = 30007
                }, {
                  data = {
                    plugin = "copilot-cmp",
                    start = "start"
                  },
                  time = 126699
                }, { {
                    data = {
                      runtime = "/home/grim/.local/share/nvim/lazy/playground/plugin/nvim-treesitter-playground.lua"
                    },
                    time = 457333
                  },
                  data = {
                    plugin = "playground",
                    start = "start"
                  },
                  time = 593940
                }, {
                  data = {
                    plugin = "cmp_luasnip",
                    start = "start"
                  },
                  time = 80732
                }, { {
                    data = {
                      runtime = "/home/grim/.local/share/nvim/lazy/hop.nvim/plugin/hop.vim"
                    },
                    time = 115007
                  },
                  data = {
                    plugin = "hop.nvim",
                    start = "start"
                  },
                  time = 337377
                }, {
                  data = {
                    plugin = "neoscroll.nvim",
                    start = "start"
                  },
                  time = 173087
                }, { {
                    data = {
                      runtime = "/home/grim/.local/share/nvim/lazy/vim-slime/plugin/slime.vim"
                    },
                    time = 284227
                  },
                  data = {
                    plugin = "vim-slime",
                    start = "start"
                  },
                  time = 455449
                }, { {
                    data = {
                      runtime = "/home/grim/.local/share/nvim/lazy/nvim-web-devicons/plugin/nvim-web-devicons.vim"
                    },
                    time = 39985
                  },
                  data = {
                    plugin = "nvim-web-devicons",
                    start = "start"
                  },
                  time = 103495
                }, {
                  data = {
                    plugin = "nvim-scrollbar",
                    start = "start"
                  },
                  time = 162958
                }, { {
                    data = {
                      runtime = "/home/grim/.local/share/nvim/lazy/copilot.vim/plugin/copilot.vim"
                    },
                    time = 166795
                  },
                  data = {
                    plugin = "copilot.vim",
                    start = "start"
                  },
                  time = 361131
                }, {
                  data = {
                    plugin = "cmp-nvim-lsp",
                    start = "start"
                  },
                  time = 192633
                }, {
                  data = {
                    plugin = "mini.icons",
                    start = "start"
                  },
                  time = 185701
                }, { {
                    data = {
                      runtime = "/home/grim/.local/share/nvim/lazy/nvim-lspconfig/plugin/lspconfig.lua"
                    },
                    time = 3362132
                  },
                  data = {
                    plugin = "nvim-lspconfig",
                    start = "start"
                  },
                  time = 3560035
                }, { {
                    data = {
                      runtime = "/home/grim/.local/share/nvim/lazy/nvim-cmp/plugin/cmp.lua"
                    },
                    time = 1252603
                  },
                  data = {
                    plugin = "nvim-cmp",
                    start = "start"
                  },
                  time = 1302678
                }, { {
                    data = {
                      runtime = "/home/grim/.local/share/nvim/lazy/nvim-colorizer.lua/plugin/colorizer.lua"
                    },
                    time = 63890
                  },
                  data = {
                    plugin = "nvim-colorizer.lua",
                    start = "start"
                  },
                  time = 141897
                }, { {
                    data = {
                      runtime = "/home/grim/.local/share/nvim/lazy/nvim-treesitter-context/plugin/treesitter-context.lua"
                    },
                    time = 89168
                  },
                  data = {
                    plugin = "nvim-treesitter-context",
                    start = "start"
                  },
                  time = 375569
                }, {
                  data = {
                    plugin = "trouble.nvim",
                    start = "start"
                  },
                  time = 290508
                }, {
                  data = {
                    plugin = "alpha-nvim",
                    start = "start"
                  },
                  time = 279367
                },
                data = {
                  start = "start"
                },
                time = 16087928
              }, { {
                  data = {
                    runtime = "/usr/share/nvim/runtime/plugin/editorconfig.lua"
                  },
                  time = 60434
                }, {
                  data = {
                    runtime = "/usr/share/nvim/runtime/plugin/gzip.vim"
                  },
                  time = 167425
                }, {
                  data = {
                    runtime = "/usr/share/nvim/runtime/plugin/man.lua"
                  },
                  time = 61747
                }, {
                  data = {
                    runtime = "/usr/share/nvim/runtime/plugin/matchit.vim"
                  },
                  time = 618006
                }, {
                  data = {
                    runtime = "/usr/share/nvim/runtime/plugin/matchparen.vim"
                  },
                  time = 132831
                }, {
                  data = {
                    runtime = "/usr/share/nvim/runtime/plugin/netrwPlugin.vim"
                  },
                  time = 644125
                }, {
                  data = {
                    runtime = "/usr/share/nvim/runtime/plugin/osc52.lua"
                  },
                  time = 66104
                }, {
                  data = {
                    runtime = "/usr/share/nvim/runtime/plugin/rplugin.vim"
                  },
                  time = 149001
                }, {
                  data = {
                    runtime = "/usr/share/nvim/runtime/plugin/shada.vim"
                  },
                  time = 72326
                }, {
                  data = {
                    runtime = "/usr/share/nvim/runtime/plugin/spellfile.vim"
                  },
                  time = 38854
                }, {
                  data = {
                    runtime = "/usr/share/nvim/runtime/plugin/tarPlugin.vim"
                  },
                  time = 102974
                }, {
                  data = {
                    runtime = "/usr/share/nvim/runtime/plugin/tohtml.lua"
                  },
                  time = 84249
                }, {
                  data = {
                    runtime = "/usr/share/nvim/runtime/plugin/tutor.vim"
                  },
                  time = 43161
                }, {
                  data = {
                    runtime = "/usr/share/nvim/runtime/plugin/zipPlugin.vim"
                  },
                  time = 133091
                },
                data = {
                  start = "rtp plugins"
                },
                time = 2469719
              }, { {
                  data = {
                    runtime = "/home/grim/.local/share/nvim/lazy/cmp-nvim-lsp/after/plugin/cmp_nvim_lsp.lua"
                  },
                  time = 163569
                }, {
                  data = {
                    runtime = "/home/grim/.local/share/nvim/lazy/cmp_luasnip/after/plugin/cmp_luasnip.lua"
                  },
                  time = 2323714
                }, {
                  data = {
                    runtime = "/home/grim/.local/share/nvim/lazy/indent-blankline.nvim/after/plugin/commands.lua"
                  },
                  time = 1090847
                }, {
                  data = {
                    runtime = "/home/grim/.local/share/nvim/lazy/cmp-buffer/after/plugin/cmp_buffer.lua"
                  },
                  time = 360350
                }, {
                  data = {
                    runtime = "/home/grim/.local/share/nvim/lazy/cmp-path/after/plugin/cmp_path.lua"
                  },
                  time = 192393
                }, {
                  data = {
                    runtime = "/home/grim/.local/share/nvim/lazy/cmp-cmdline/after/plugin/cmp_cmdline.lua"
                  },
                  time = 186843
                },
                data = {
                  start = "after"
                },
                time = 4597523
              },
              data = {
                start = "startup"
              },
              time = 23335420
            }, {
              data = {
                start = "startuptime"
              },
              time = 33660285
            }, {
              data = {
                event = "VeryLazy"
              },
              time = 321697
            },
            name = "lazy"
          } },
        debug = <function 819>,
        error = <function 820>,
        exiting = <function 821>,
        extend = <function 822>,
        filter = <function 823>,
        find_root = <function 824>,
        get_source = <function 825>,
        get_unloaded_rtp = <function 826>,
        info = <function 827>,
        is_list = <function 828>,
        key_get = <function 829>,
        key_set = <function 830>,
        lazy_require = <function 831>,
        ls = <function 832>,
        lsmod = <function 833>,
        merge = <function 834>,
        norm = <function 835>,
        normname = <function 836>,
        notify = <function 837>,
        pretty_trace = <function 838>,
        topmod = <function 839>,
        track = <function 840>,
        trackfn = <function 841>,
        try = <function 842>,
        unloaded_cache = {
          ["nvim-treesitter"] = { "/home/grim/.local/share/nvim/lazy/nvim-treesitter", "/home/grim/.local/share/nvim/lazy/nvim-scrollbar", "/home/grim/.local/share/nvim/lazy/copilot.vim", "/home/grim/.local/share/nvim/lazy/nvim-web-devicons", "/home/grim/.local/share/nvim/lazy/neoscroll.nvim", "/home/grim/.local/share/nvim/lazy/vim-slime", "/home/grim/.local/share/nvim/lazy/mini.icons", "/home/grim/.local/share/nvim/lazy/nvim-colorizer.lua", "/home/grim/.local/share/nvim/lazy/nvim-lspconfig", "/home/grim/.local/share/nvim/lazy/trouble.nvim", "/home/grim/.local/share/nvim/lazy/nvim-treesitter-context", "/home/grim/.local/share/nvim/lazy/nvim-cmp", "/home/grim/.local/share/nvim/lazy/cmp-nvim-lsp", "/home/grim/.local/share/nvim/lazy/hop.nvim", "/home/grim/.local/share/nvim/lazy/plenary.nvim", "/home/grim/.local/share/nvim/lazy/nvim-ts-rainbow", "/home/grim/.local/share/nvim/lazy/copilot-cmp", "/home/grim/.local/share/nvim/lazy/playground", "/home/grim/.local/share/nvim/lazy/nvim-tree.lua", "/home/grim/.local/share/nvim/lazy/cmp_luasnip", "/home/grim/.local/share/nvim/lazy/alpha-nvim" }
        },
        very_lazy = <function 843>,
        walk = <function 844>,
        walkmods = <function 845>,
        warn = <function 846>
      },
      ["lazy.manage"] = {
        build = <function 847>,
        check = <function 848>,
        clean = <function 849>,
        clear = <function 850>,
        install = <function 851>,
        log = <function 852>,
        opts = <function 853>,
        restore = <function 854>,
        run = <function 855>,
        sync = <function 856>,
        update = <function 857>
      },
      ["lazy.manage.process"] = {
        abort = <function 858>,
        exec = <function 859>,
        running = {
          <metatable> = {
            __mode = "k"
          }
        },
        signals = { "hup", "int", "quit", "ill", "trap", "abrt", "bus", "fpe", "kill", "usr1", "segv", "usr2", "pipe", "alrm", "term", "chld", "cont", "stop", "tstp", "ttin", "ttou", "urg", "xcpu", "xfsz", "vtalrm", "prof", "winch", "io", "pwr", "emt", "sys", "info" },
        spawn = <function 860>
      },
      ["lazy.manage.reloader"] = {
        check = <function 861>,
        disable = <function 862>,
        enable = <function 863>,
        eq = <function 864>,
        files = {},
        reload = <function 865>
      },
      ["lazy.manage.runner"] = {
        _start = <function 866>,
        is_running = <function 867>,
        new = <function 868>,
        plugin = <function 869>,
        queue = <function 870>,
        start = <function 871>,
        update = <function 872>,
        wait = <function 873>
      },
      ["lazy.manage.task"] = {
        _done = <function 874>,
        _run = <function 875>,
        error = <function 876>,
        get_log = <function 877>,
        has_errors = <function 878>,
        has_warnings = <function 879>,
        headless = <function 880>,
        log = <function 881>,
        new = <function 882>,
        output = <function 883>,
        prefix = <function 884>,
        render = <function 885>,
        set_level = <function 886>,
        spawn = <function 887>,
        status = <function 888>,
        time = <function 889>,
        warn = <function 890>,
        <metatable> = {
          __index = <table 56>
        }
      },
      ["lazy.pkg"] = {
        VERSION = 12,
        cache = { <table 129>, <table 135> },
        dirty = false,
        get = <function 891>,
        update = <function 892>,
        <metatable> = {
          __index = <function 893>
        }
      },
      ["lazy.stats"] = {
        C = <userdata 4>,
        _stats = {
          count = 0,
          loaded = 0,
          real_cputime = true,
          startuptime = 33.660285,
          times = {
            LazyDone = 28.44789,
            LazyStart = 3.462233,
            UIEnter = 33.660285
          }
        },
        cputime = <function 894>,
        on_ui_enter = <function 895>,
        stats = <function 896>,
        track = <function 897>
      },
      ["lazy.terminal"] = {
        black = <function 898>,
        blue = <function 899>,
        bright_black = <function 900>,
        bright_blue = <function 901>,
        bright_cyan = <function 902>,
        bright_green = <function 903>,
        bright_magenta = <function 904>,
        bright_red = <function 905>,
        bright_white = <function 906>,
        bright_yellow = <function 907>,
        color = <function 908>,
        colors = {
          black = "\27[30m",
          blue = "\27[34m",
          bright_black = "\27[90m",
          bright_blue = "\27[94m",
          bright_cyan = "\27[96m",
          bright_green = "\27[92m",
          bright_magenta = "\27[95m",
          bright_red = "\27[91m",
          bright_white = "\27[97m",
          bright_yellow = "\27[93m",
          cyan = "\27[36m",
          green = "\27[32m",
          magenta = "\27[35m",
          red = "\27[31m",
          reset = "\27[0m",
          white = "\27[37m",
          yellow = "\27[33m"
        },
        cyan = <function 909>,
        green = <function 910>,
        magenta = <function 911>,
        prefix = <function 912>,
        red = <function 913>,
        white = <function 914>,
        yellow = <function 915>
      },
      ["lazy.util"] = {
        _dump = <function 916>,
        dump = <function 917>,
        file_exists = <function 918>,
        float = <function 919>,
        float_cmd = <function 920>,
        float_term = <function 921>,
        foreach = <function 922>,
        git_info = <function 923>,
        head = <function 924>,
        markdown = <function 925>,
        open = <function 926>,
        open_cmd = <function 927>,
        read_file = <function 928>,
        throttle = <function 929>,
        weak = <function 930>,
        wo = <function 931>,
        write_file = <function 932>,
        <metatable> = {
          __index = <table 155>
        }
      },
      ["lazy.view.commands"] = {
        cmd = <function 933>,
        commands = {
          build = <function 847>,
          check = <function 848>,
          clean = <function 849>,
          clear = <function 934>,
          debug = <function 935>,
          health = <function 936>,
          help = <function 937>,
          home = <function 938>,
          install = <function 851>,
          load = <function 939>,
          log = <function 852>,
          pkg = <function 940>,
          profile = <function 941>,
          reload = <function 942>,
          restore = <function 854>,
          show = <function 943>,
          sync = <function 856>,
          update = <function 857>
        },
        complete = <function 944>,
        parse = <function 945>,
        setup = <function 946>
      },
      lpeg = <table 8>,
      lsp = {
        setup = <function 947>
      },
      ["lspconfig.util"] = {
        _parse_user_command_options = <function 948>,
        add_hook_after = <function 949>,
        add_hook_before = <function 950>,
        available_servers = <function 951>,
        bufname_valid = <function 952>,
        create_module_commands = <function 953>,
        default_config = {
          autostart = true,
          capabilities = {
            general = {
              positionEncodings = { "utf-8", "utf-16", "utf-32" }
            },
            textDocument = {
              callHierarchy = {
                dynamicRegistration = false
              },
              codeAction = {
                codeActionLiteralSupport = {
                  codeActionKind = {
                    valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
                  }
                },
                dataSupport = true,
                dynamicRegistration = true,
                isPreferredSupport = true,
                resolveSupport = {
                  properties = { "edit", "command" }
                }
              },
              codeLens = {
                dynamicRegistration = false,
                resolveSupport = {
                  properties = { "command" }
                }
              },
              completion = {
                completionItem = {
                  commitCharactersSupport = false,
                  deprecatedSupport = true,
                  documentationFormat = { "markdown", "plaintext" },
                  preselectSupport = false,
                  resolveSupport = {
                    properties = { "additionalTextEdits", "command" }
                  },
                  snippetSupport = true,
                  tagSupport = {
                    valueSet = { 1 }
                  }
                },
                completionItemKind = {
                  valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
                },
                completionList = {
                  itemDefaults = { "editRange", "insertTextFormat", "insertTextMode", "data" }
                },
                contextSupport = true,
                dynamicRegistration = false
              },
              declaration = {
                linkSupport = true
              },
              definition = {
                dynamicRegistration = true,
                linkSupport = true
              },
              diagnostic = {
                dynamicRegistration = false
              },
              documentHighlight = {
                dynamicRegistration = false
              },
              documentSymbol = {
                dynamicRegistration = false,
                hierarchicalDocumentSymbolSupport = true,
                symbolKind = {
                  valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
                }
              },
              foldingRange = {
                dynamicRegistration = false,
                foldingRange = {
                  collapsedText = true
                },
                lineFoldingOnly = true
              },
              formatting = {
                dynamicRegistration = true
              },
              hover = {
                contentFormat = { "markdown", "plaintext" },
                dynamicRegistration = true
              },
              implementation = {
                linkSupport = true
              },
              inlayHint = {
                dynamicRegistration = true,
                resolveSupport = {
                  properties = { "textEdits", "tooltip", "location", "command" }
                }
              },
              publishDiagnostics = {
                dataSupport = true,
                relatedInformation = true,
                tagSupport = {
                  valueSet = { 1, 2 }
                }
              },
              rangeFormatting = {
                dynamicRegistration = true,
                rangesSupport = true
              },
              references = {
                dynamicRegistration = false
              },
              rename = {
                dynamicRegistration = true,
                prepareSupport = true
              },
              semanticTokens = {
                augmentsSyntaxTokens = true,
                dynamicRegistration = false,
                formats = { "relative" },
                multilineTokenSupport = false,
                overlappingTokenSupport = true,
                requests = {
                  full = {
                    delta = true
                  },
                  range = false
                },
                serverCancelSupport = false,
                tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
                tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
              },
              signatureHelp = {
                dynamicRegistration = false,
                signatureInformation = {
                  activeParameterSupport = true,
                  documentationFormat = { "markdown", "plaintext" },
                  parameterInformation = {
                    labelOffsetSupport = true
                  }
                }
              },
              synchronization = {
                didSave = true,
                dynamicRegistration = false,
                willSave = true,
                willSaveWaitUntil = true
              },
              typeDefinition = {
                linkSupport = true
              }
            },
            window = {
              showDocument = {
                support = true
              },
              showMessage = {
                messageActionItem = {
                  additionalPropertiesSupport = true
                }
              },
              workDoneProgress = true
            },
            workspace = {
              applyEdit = true,
              configuration = true,
              didChangeConfiguration = {
                dynamicRegistration = false
              },
              didChangeWatchedFiles = {
                dynamicRegistration = false,
                relativePatternSupport = true
              },
              inlayHint = {
                refreshSupport = true
              },
              semanticTokens = {
                refreshSupport = true
              },
              symbol = {
                dynamicRegistration = false,
                symbolKind = {
                  valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
                }
              },
              workspaceEdit = {
                resourceOperations = { "rename", "create", "delete" }
              },
              workspaceFolders = true
            }
          },
          handlers = {},
          init_options = vim.empty_dict(),
          log_level = 2,
          message_level = 2,
          settings = vim.empty_dict()
        },
        find_git_ancestor = <function 954>,
        find_mercurial_ancestor = <function 955>,
        find_node_modules_ancestor = <function 956>,
        find_package_json_ancestor = <function 957>,
        get_active_client_by_name = <function 958>,
        get_active_clients_list_by_ft = <function 959>,
        get_config_by_ft = <function 960>,
        get_lsp_clients = <function 961>,
        get_managed_clients = <function 962>,
        get_other_matching_providers = <function 963>,
        get_typescript_server_path = <function 964>,
        insert_package_json = <function 965>,
        path = {
          dirname = <function 966>,
          exists = <function 967>,
          is_descendant = <function 968>,
          is_dir = <function 969>,
          is_file = <function 970>,
          iterate_parents = <function 971>,
          join = <function 972>,
          path_separator = ":",
          sanitize = <function 973>
        },
        root_markers_with_field = <function 974>,
        root_pattern = <function 975>,
        search_ancestors = <function 976>,
        strip_archive_subpath = <function 977>,
        tbl_flatten = <function 978>,
        validate_bufnr = <function 979>
      },
      lspext = {
        setup = <function 980>
      },
      luv = <156>{
        accept = <function 981>,
        async_send = <function 982>,
        available_parallelism = <function 983>,
        backend_fd = <function 984>,
        backend_timeout = <function 985>,
        cancel = <function 986>,
        chdir = <function 987>,
        check_start = <function 988>,
        check_stop = <function 989>,
        clock_gettime = <function 990>,
        close = <function 991>,
        constants = {
          AF_APPLETALK = 5,
          AF_ATMPVC = 8,
          AF_AX25 = 3,
          AF_INET = 2,
          AF_INET6 = 10,
          AF_IPX = 4,
          AF_NETLINK = 16,
          AF_PACKET = 17,
          AF_UNIX = 1,
          AF_X25 = 9,
          AI_ADDRCONFIG = 32,
          AI_ALL = 16,
          AI_NUMERICHOST = 4,
          AI_NUMERICSERV = 1024,
          AI_PASSIVE = 1,
          AI_V4MAPPED = 8,
          F_OK = 0,
          O_APPEND = 1024,
          O_CREAT = 64,
          O_DSYNC = 4096,
          O_EXCL = 128,
          O_NOCTTY = 256,
          O_NONBLOCK = 2048,
          O_RDONLY = 0,
          O_RDWR = 2,
          O_RSYNC = 1052672,
          O_SYNC = 1052672,
          O_TRUNC = 512,
          O_WRONLY = 1,
          PIPE_NO_TRUNCATE = 1,
          R_OK = 4,
          SIGABRT = 6,
          SIGALRM = 14,
          SIGBUS = 7,
          SIGCHLD = 17,
          SIGCONT = 18,
          SIGFPE = 8,
          SIGHUP = 1,
          SIGILL = 4,
          SIGINT = 2,
          SIGIO = 29,
          SIGIOT = 6,
          SIGKILL = 9,
          SIGPIPE = 13,
          SIGPOLL = 29,
          SIGPROF = 27,
          SIGPWR = 30,
          SIGQUIT = 3,
          SIGSEGV = 11,
          SIGSTKFLT = 16,
          SIGSTOP = 19,
          SIGSYS = 31,
          SIGTERM = 15,
          SIGTRAP = 5,
          SIGTSTP = 20,
          SIGTTIN = 21,
          SIGTTOU = 22,
          SIGURG = 23,
          SIGUSR1 = 10,
          SIGUSR2 = 12,
          SIGVTALRM = 26,
          SIGWINCH = 28,
          SIGXCPU = 24,
          SIGXFSZ = 25,
          SOCK_DGRAM = 2,
          SOCK_RAW = 3,
          SOCK_RDM = 4,
          SOCK_SEQPACKET = 5,
          SOCK_STREAM = 1,
          TCP_IPV6ONLY = 1,
          THREAD_PRIORITY_ABOVE_NORMAL = 1,
          THREAD_PRIORITY_BELOW_NORMAL = -1,
          THREAD_PRIORITY_HIGHEST = 2,
          THREAD_PRIORITY_LOWEST = -2,
          THREAD_PRIORITY_NORMAL = 0,
          TTY_MODE_IO = 2,
          TTY_MODE_NORMAL = 0,
          TTY_MODE_RAW = 1,
          UDP_IPV6ONLY = 1,
          UDP_MMSG_CHUNK = 8,
          UDP_MMSG_FREE = 16,
          UDP_PARTIAL = 2,
          UDP_RECVMMSG = 256,
          UDP_REUSEADDR = 4,
          W_OK = 2,
          X_OK = 1
        },
        cpu_info = <function 992>,
        cpumask_size = <function 993>,
        cwd = <function 994>,
        disable_stdio_inheritance = <function 995>,
        errno = {
          E2BIG = -7,
          EACCES = -13,
          EADDRINUSE = -98,
          EADDRNOTAVAIL = -99,
          EAFNOSUPPORT = -97,
          EAGAIN = -11,
          EAI_ADDRFAMILY = -3000,
          EAI_AGAIN = -3001,
          EAI_BADFLAGS = -3002,
          EAI_BADHINTS = -3013,
          EAI_CANCELED = -3003,
          EAI_FAIL = -3004,
          EAI_FAMILY = -3005,
          EAI_MEMORY = -3006,
          EAI_NODATA = -3007,
          EAI_NONAME = -3008,
          EAI_OVERFLOW = -3009,
          EAI_PROTOCOL = -3014,
          EAI_SERVICE = -3010,
          EAI_SOCKTYPE = -3011,
          EALREADY = -114,
          EBADF = -9,
          EBUSY = -16,
          ECANCELED = -125,
          ECHARSET = -4080,
          ECONNABORTED = -103,
          ECONNREFUSED = -111,
          ECONNRESET = -104,
          EDESTADDRREQ = -89,
          EEXIST = -17,
          EFAULT = -14,
          EFBIG = -27,
          EFTYPE = -4028,
          EHOSTDOWN = -112,
          EHOSTUNREACH = -113,
          EILSEQ = -84,
          EINTR = -4,
          EINVAL = -22,
          EIO = -5,
          EISCONN = -106,
          EISDIR = -21,
          ELOOP = -40,
          EMFILE = -24,
          EMLINK = -31,
          EMSGSIZE = -90,
          ENAMETOOLONG = -36,
          ENETDOWN = -100,
          ENETUNREACH = -101,
          ENFILE = -23,
          ENOBUFS = -105,
          ENODATA = -61,
          ENODEV = -19,
          ENOENT = -2,
          ENOMEM = -12,
          ENONET = -64,
          ENOPROTOOPT = -92,
          ENOSPC = -28,
          ENOSYS = -38,
          ENOTCONN = -107,
          ENOTDIR = -20,
          ENOTEMPTY = -39,
          ENOTSOCK = -88,
          ENOTSUP = -95,
          ENOTTY = -25,
          ENXIO = -6,
          EOF = -4095,
          EOVERFLOW = -75,
          EPERM = -1,
          EPIPE = -32,
          EPROTO = -71,
          EPROTONOSUPPORT = -93,
          EPROTOTYPE = -91,
          ERANGE = -34,
          EREMOTEIO = -121,
          EROFS = -30,
          ESHUTDOWN = -108,
          ESOCKTNOSUPPORT = -94,
          ESPIPE = -29,
          ESRCH = -3,
          ETIMEDOUT = -110,
          ETXTBSY = -26,
          EUNATCH = -49,
          EXDEV = -18,
          UNKNOWN = -4094
        },
        exepath = <function 996>,
        fileno = <function 997>,
        fs_access = <function 998>,
        fs_chmod = <function 999>,
        fs_chown = <function 1000>,
        fs_close = <function 1001>,
        fs_closedir = <function 1002>,
        fs_copyfile = <function 1003>,
        fs_event_getpath = <function 1004>,
        fs_event_start = <function 1005>,
        fs_event_stop = <function 1006>,
        fs_fchmod = <function 1007>,
        fs_fchown = <function 1008>,
        fs_fdatasync = <function 1009>,
        fs_fstat = <function 1010>,
        fs_fsync = <function 1011>,
        fs_ftruncate = <function 1012>,
        fs_futime = <function 1013>,
        fs_lchown = <function 1014>,
        fs_link = <function 1015>,
        fs_lstat = <function 1016>,
        fs_lutime = <function 1017>,
        fs_mkdir = <function 1018>,
        fs_mkdtemp = <function 1019>,
        fs_mkstemp = <function 1020>,
        fs_open = <function 1021>,
        fs_opendir = <function 1022>,
        fs_poll_getpath = <function 1023>,
        fs_poll_start = <function 1024>,
        fs_poll_stop = <function 1025>,
        fs_read = <function 1026>,
        fs_readdir = <function 1027>,
        fs_readlink = <function 1028>,
        fs_realpath = <function 1029>,
        fs_rename = <function 1030>,
        fs_rmdir = <function 1031>,
        fs_scandir = <function 1032>,
        fs_scandir_next = <function 1033>,
        fs_sendfile = <function 1034>,
        fs_stat = <function 1035>,
        fs_statfs = <function 1036>,
        fs_symlink = <function 1037>,
        fs_unlink = <function 1038>,
        fs_utime = <function 1039>,
        fs_write = <function 1040>,
        get_available_memory = <function 1041>,
        get_constrained_memory = <function 1042>,
        get_free_memory = <function 1043>,
        get_process_title = <function 1044>,
        get_total_memory = <function 1045>,
        getaddrinfo = <function 1046>,
        getgid = <function 1047>,
        getnameinfo = <function 1048>,
        getpid = <function 1049>,
        getrusage = <function 1050>,
        gettimeofday = <function 1051>,
        getuid = <function 1052>,
        guess_handle = <function 1053>,
        handle_get_type = <function 1054>,
        has_ref = <function 1055>,
        hrtime = <function 1056>,
        idle_start = <function 1057>,
        idle_stop = <function 1058>,
        if_indextoiid = <function 1059>,
        if_indextoname = <function 1060>,
        interface_addresses = <function 1061>,
        is_active = <function 1062>,
        is_closing = <function 1063>,
        is_readable = <function 1064>,
        is_writable = <function 1065>,
        kill = <function 1066>,
        listen = <function 1067>,
        loadavg = <function 1068>,
        loop_alive = <function 1069>,
        loop_close = <function 1070>,
        loop_configure = <function 1071>,
        loop_mode = <function 1072>,
        metrics_idle_time = <function 1073>,
        metrics_info = <function 1074>,
        new_async = <function 1075>,
        new_check = <function 1076>,
        new_fs_event = <function 1077>,
        new_fs_poll = <function 1078>,
        new_idle = <function 1079>,
        new_pipe = <function 1080>,
        new_poll = <function 1081>,
        new_prepare = <function 1082>,
        new_signal = <function 1083>,
        new_socket_poll = <function 1084>,
        new_tcp = <function 1085>,
        new_thread = <function 1086>,
        new_timer = <function 1087>,
        new_tty = <function 1088>,
        new_udp = <function 1089>,
        new_work = <function 1090>,
        now = <function 1091>,
        os_environ = <function 1092>,
        os_get_passwd = <function 1093>,
        os_getenv = <function 1094>,
        os_gethostname = <function 1095>,
        os_getpid = <function 1096>,
        os_getppid = <function 1097>,
        os_getpriority = <function 1098>,
        os_homedir = <function 1099>,
        os_setenv = <function 1100>,
        os_setpriority = <function 1101>,
        os_tmpdir = <function 1102>,
        os_uname = <function 1103>,
        os_unsetenv = <function 1104>,
        pipe = <function 1105>,
        pipe_bind = <function 1106>,
        pipe_bind2 = <function 1107>,
        pipe_chmod = <function 1108>,
        pipe_connect = <function 1109>,
        pipe_connect2 = <function 1110>,
        pipe_getpeername = <function 1111>,
        pipe_getsockname = <function 1112>,
        pipe_open = <function 1113>,
        pipe_pending_count = <function 1114>,
        pipe_pending_instances = <function 1115>,
        pipe_pending_type = <function 1116>,
        poll_start = <function 1117>,
        poll_stop = <function 1118>,
        prepare_start = <function 1119>,
        prepare_stop = <function 1120>,
        print_active_handles = <function 1121>,
        print_all_handles = <function 1122>,
        process_get_pid = <function 1123>,
        process_kill = <function 1124>,
        queue_work = <function 1125>,
        random = <function 1126>,
        read_start = <function 1127>,
        read_stop = <function 1128>,
        recv_buffer_size = <function 1129>,
        ref = <function 1130>,
        req_get_type = <function 1131>,
        resident_set_memory = <function 1132>,
        run = <function 1133>,
        send_buffer_size = <function 1134>,
        set_process_title = <function 1135>,
        setgid = <function 1136>,
        setuid = <function 1137>,
        shutdown = <function 1138>,
        signal_start = <function 1139>,
        signal_start_oneshot = <function 1140>,
        signal_stop = <function 1141>,
        sleep = <function 1142>,
        socketpair = <function 1143>,
        spawn = <function 1144>,
        stop = <function 1145>,
        stream_get_write_queue_size = <function 1146>,
        stream_set_blocking = <function 1147>,
        tcp_bind = <function 1148>,
        tcp_close_reset = <function 1149>,
        tcp_connect = <function 1150>,
        tcp_getpeername = <function 1151>,
        tcp_getsockname = <function 1152>,
        tcp_keepalive = <function 1153>,
        tcp_nodelay = <function 1154>,
        tcp_open = <function 1155>,
        tcp_simultaneous_accepts = <function 1156>,
        tcp_write_queue_size = <function 1157>,
        thread_equal = <function 1158>,
        thread_getaffinity = <function 1159>,
        thread_getcpu = <function 1160>,
        thread_getpriority = <function 1161>,
        thread_join = <function 1162>,
        thread_self = <function 1163>,
        thread_setaffinity = <function 1164>,
        thread_setpriority = <function 1165>,
        timer_again = <function 1166>,
        timer_get_due_in = <function 1167>,
        timer_get_repeat = <function 1168>,
        timer_set_repeat = <function 1169>,
        timer_start = <function 1170>,
        timer_stop = <function 1171>,
        translate_sys_error = <function 1172>,
        try_write = <function 1173>,
        try_write2 = <function 1174>,
        tty_get_vterm_state = <function 1175>,
        tty_get_winsize = <function 1176>,
        tty_reset_mode = <function 1177>,
        tty_set_mode = <function 1178>,
        tty_set_vterm_state = <function 1179>,
        udp_bind = <function 1180>,
        udp_connect = <function 1181>,
        udp_get_send_queue_count = <function 1182>,
        udp_get_send_queue_size = <function 1183>,
        udp_getpeername = <function 1184>,
        udp_getsockname = <function 1185>,
        udp_open = <function 1186>,
        udp_recv_start = <function 1187>,
        udp_recv_stop = <function 1188>,
        udp_send = <function 1189>,
        udp_set_broadcast = <function 1190>,
        udp_set_membership = <function 1191>,
        udp_set_multicast_interface = <function 1192>,
        udp_set_multicast_loop = <function 1193>,
        udp_set_multicast_ttl = <function 1194>,
        udp_set_source_membership = <function 1195>,
        udp_set_ttl = <function 1196>,
        udp_try_send = <function 1197>,
        unref = <function 1198>,
        update_time = <function 1199>,
        uptime = <function 1200>,
        version = <function 1201>,
        version_string = <function 1202>,
        walk = <function 1203>,
        write = <function 1204>,
        write2 = <function 1205>
      },
      math = <table 9>,
      mpack = <157>{
        NIL = vim.NIL,
        Packer = <function 1206>,
        Session = <function 1207>,
        Unpacker = <function 1208>,
        decode = <function 1209>,
        encode = <function 1210>
      },
      ["nvim-treesitter"] = {
        define_modules = <function 1211>,
        setup = <function 1212>,
        statusline = <function 1213>
      },
      ["nvim-treesitter-playground"] = {
        init = <function 1214>
      },
      ["nvim-treesitter-textobjects"] = {
        has_textobjects = <function 1215>,
        init = <function 1216>
      },
      ["nvim-treesitter.caching"] = {
        create_buffer_cache = <function 1217>
      },
      ["nvim-treesitter.compat"] = {
        flatten = <function 1218>,
        get_node_text = <function 1219>,
        get_query = <function 1220>,
        get_query_files = <function 1221>,
        get_range = <function 1222>,
        parse_query = <function 1223>,
        require_language = <function 1224>
      },
      ["nvim-treesitter.configs"] = {
        attach_module = <function 1225>,
        available_modules = <function 1226>,
        commands = {
          TSBufDisable = {
            args = { "-nargs=1", "-complete=custom,nvim_treesitter#available_modules" },
            run = <function 1227>
          },
          TSBufEnable = {
            args = { "-nargs=1", "-complete=custom,nvim_treesitter#available_modules" },
            run = <function 1228>
          },
          TSBufToggle = {
            args = { "-nargs=1", "-complete=custom,nvim_treesitter#available_modules" },
            run = <function 1229>
          },
          TSConfigInfo = {
            args = { "-nargs=0" },
            run = <function 1230>
          },
          TSDisable = {
            args = { "-nargs=+", "-complete=custom,nvim_treesitter#available_modules" },
            run = <function 1231>
          },
          TSEditQuery = {
            args = { "-nargs=+", "-complete=custom,nvim_treesitter#available_query_groups" },
            run = <function 1232>
          },
          TSEditQueryUserAfter = {
            args = { "-nargs=+", "-complete=custom,nvim_treesitter#available_query_groups" },
            run = <function 1233>
          },
          TSEnable = {
            args = { "-nargs=+", "-complete=custom,nvim_treesitter#available_modules" },
            run = <function 1234>
          },
          TSToggle = {
            args = { "-nargs=+", "-complete=custom,nvim_treesitter#available_modules" },
            run = <function 1235>
          }
        },
        define_modules = <function 1211>,
        detach_module = <function 1236>,
        edit_query_file = <function 1232>,
        edit_query_file_user_after = <function 1233>,
        get_ensure_installed_parsers = <function 1237>,
        get_ignored_parser_installs = <function 1238>,
        get_module = <function 1239>,
        get_parser_info_dir = <function 1240>,
        get_parser_install_dir = <function 1241>,
        init = <function 1242>,
        is_enabled = <function 1243>,
        is_module = <function 1244>,
        reattach_module = <function 1245>,
        setup = <function 1246>
      },
      ["nvim-treesitter.info"] = {
        commands = {
          TSInstallInfo = {
            args = { "-nargs=0" },
            run = <function 1247>
          },
          TSModuleInfo = {
            args = { "-nargs=?", "-complete=custom,nvim_treesitter#available_modules" },
            run = <function 1248>
          }
        },
        installed_parsers = <function 1249>
      },
      ["nvim-treesitter.install"] = {
        command_extra_args = {},
        commands = {
          TSInstall = {
            args = { "-nargs=+", "-bang", "-complete=custom,nvim_treesitter#installable_parsers" },
            run = <function 1250>,
            ["run!"] = <function 1251>
          },
          TSInstallFromGrammar = {
            args = { "-nargs=+", "-bang", "-complete=custom,nvim_treesitter#installable_parsers" },
            run = <function 1252>,
            ["run!"] = <function 1253>
          },
          TSInstallSync = {
            args = { "-nargs=+", "-bang", "-complete=custom,nvim_treesitter#installable_parsers" },
            run = <function 1254>,
            ["run!"] = <function 1255>
          },
          TSUninstall = {
            args = { "-nargs=+", "-complete=custom,nvim_treesitter#installed_parsers" },
            run = <function 1256>
          },
          TSUpdate = {
            args = { "-nargs=*", "-complete=custom,nvim_treesitter#installed_parsers" },
            run = <function 1257>
          },
          TSUpdateSync = {
            args = { "-nargs=*", "-complete=custom,nvim_treesitter#installed_parsers" },
            run = <function 1258>
          }
        },
        compilers = { vim.NIL, "cc", "gcc", "clang", "cl", "zig" },
        ensure_installed = <function 1259>,
        ensure_installed_sync = <function 1260>,
        iter_cmd = <function 1261>,
        prefer_git = false,
        setup_auto_install = <function 1262>,
        uninstall = <function 1256>,
        update = <function 1263>,
        write_lockfile = <function 1264>
      },
      ["nvim-treesitter.parsers"] = {
        available_parsers = <function 1265>,
        ft_to_lang = <function 1266>,
        get_buf_lang = <function 1267>,
        get_parser = <function 1268>,
        get_parser_configs = <function 1269>,
        get_tree_root = <function 1270>,
        has_parser = <function 1271>,
        list = {
          ada = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/briot/tree-sitter-ada"
            },
            maintainers = { "@briot" }
          },
          agda = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/tree-sitter/tree-sitter-agda"
            },
            maintainers = { "@Decodetalkers" }
          },
          angular = {
            experimental = true,
            filetype = "htmlangular",
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              generate_requires_npm = true,
              url = "https://github.com/dlvandenberg/tree-sitter-angular"
            },
            maintainers = { "@dlvandenberg" }
          },
          apex = {
            install_info = {
              files = { "src/parser.c" },
              location = "apex",
              url = "https://github.com/aheber/tree-sitter-sfapex"
            },
            maintainers = { "@aheber", "@xixiaofinland" }
          },
          arduino = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/ObserverOfTime/tree-sitter-arduino"
            },
            maintainers = { "@ObserverOfTime" }
          },
          asm = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/RubixDev/tree-sitter-asm"
            },
            maintainers = { "@RubixDev" }
          },
          astro = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/virchau13/tree-sitter-astro"
            },
            maintainers = { "@virchau13" }
          },
          authzed = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/mleonidas/tree-sitter-authzed"
            },
            maintainers = { "@mattpolzin" }
          },
          awk = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/Beaglefoot/tree-sitter-awk"
            }
          },
          bash = {
            filetype = "sh",
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/tree-sitter/tree-sitter-bash"
            },
            maintainers = { "@TravonteD" }
          },
          bass = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/vito/tree-sitter-bass"
            },
            maintainers = { "@amaanq" }
          },
          beancount = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/polarmutex/tree-sitter-beancount"
            },
            maintainers = { "@polarmutex" }
          },
          bibtex = {
            filetype = "bib",
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/latex-lsp/tree-sitter-bibtex"
            },
            maintainers = { "@theHamsta", "@clason" }
          },
          bicep = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/amaanq/tree-sitter-bicep"
            },
            maintainers = { "@amaanq" }
          },
          bitbake = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/amaanq/tree-sitter-bitbake"
            },
            maintainers = { "@amaanq" }
          },
          blade = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/EmranMR/tree-sitter-blade"
            },
            maintainers = { "@calebdw" }
          },
          blueprint = {
            experimental = true,
            install_info = {
              files = { "src/parser.c" },
              url = "https://gitlab.com/gabmus/tree-sitter-blueprint.git"
            },
            maintainers = { "@gabmus" }
          },
          bp = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/ambroisie/tree-sitter-bp"
            },
            maintainers = { "@ambroisie" }
          },
          brightscript = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/ajdelcimmuto/tree-sitter-brightscript"
            },
            maintainers = { "@ajdelcimmuto" }
          },
          c = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/tree-sitter/tree-sitter-c"
            },
            maintainers = { "@amaanq" }
          },
          c_sharp = {
            filetype = "cs",
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/tree-sitter/tree-sitter-c-sharp"
            },
            maintainers = { "@amaanq" }
          },
          caddy = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/opa-oz/tree-sitter-caddy"
            },
            maintainers = { "@opa-oz" }
          },
          cairo = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/amaanq/tree-sitter-cairo"
            },
            maintainers = { "@amaanq" }
          },
          capnp = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/amaanq/tree-sitter-capnp"
            },
            maintainers = { "@amaanq" }
          },
          chatito = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/ObserverOfTime/tree-sitter-chatito"
            },
            maintainers = { "@ObserverOfTime" }
          },
          circom = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/Decurity/tree-sitter-circom"
            },
            maintainers = { "@alexandr-martirosyan" }
          },
          clojure = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/sogaiu/tree-sitter-clojure"
            },
            maintainers = { "@NoahTheDuke" }
          },
          cmake = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/uyha/tree-sitter-cmake"
            },
            maintainers = { "@uyha" }
          },
          comment = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/stsewd/tree-sitter-comment"
            },
            maintainers = { "@stsewd" }
          },
          commonlisp = {
            filetype = "lisp",
            install_info = {
              files = { "src/parser.c" },
              generate_requires_npm = true,
              url = "https://github.com/theHamsta/tree-sitter-commonlisp"
            },
            maintainers = { "@theHamsta" }
          },
          cooklang = {
            filetype = "cook",
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/addcninblue/tree-sitter-cooklang"
            },
            maintainers = { "@addcninblue" }
          },
          corn = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/jakestanger/tree-sitter-corn"
            },
            maintainers = { "@jakestanger" }
          },
          cpon = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/amaanq/tree-sitter-cpon"
            },
            maintainers = { "@amaanq" }
          },
          cpp = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              generate_requires_npm = true,
              url = "https://github.com/tree-sitter/tree-sitter-cpp"
            },
            maintainers = { "@theHamsta" }
          },
          css = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/tree-sitter/tree-sitter-css"
            },
            maintainers = { "@TravonteD" }
          },
          csv = {
            install_info = {
              files = { "src/parser.c" },
              location = "csv",
              url = "https://github.com/amaanq/tree-sitter-csv"
            },
            maintainers = { "@amaanq" }
          },
          cuda = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              generate_requires_npm = true,
              url = "https://github.com/theHamsta/tree-sitter-cuda"
            },
            maintainers = { "@theHamsta" }
          },
          cue = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/eonpatapon/tree-sitter-cue"
            },
            maintainers = { "@amaanq" }
          },
          cylc = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/elliotfontaine/tree-sitter-cylc"
            },
            maintainers = { "@elliotfontaine" }
          },
          d = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/gdamore/tree-sitter-d"
            },
            maintainers = { "@amaanq" }
          },
          dart = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/UserNobody14/tree-sitter-dart"
            },
            maintainers = { "@akinsho" }
          },
          desktop = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/ValdezFOmar/tree-sitter-desktop"
            },
            maintainers = { "@ValdezFOmar" }
          },
          devicetree = {
            filetype = "dts",
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/joelspadin/tree-sitter-devicetree"
            },
            maintainers = { "@jedrzejboczar" }
          },
          dhall = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/jbellerb/tree-sitter-dhall"
            },
            maintainers = { "@amaanq" }
          },
          diff = {
            filetype = "gitdiff",
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/the-mikedavis/tree-sitter-diff"
            },
            maintainers = { "@gbprod" }
          },
          disassembly = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/ColinKennedy/tree-sitter-disassembly"
            },
            maintainers = { "@ColinKennedy" }
          },
          djot = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/treeman/tree-sitter-djot"
            },
            maintainers = { "@NoahTheDuke" }
          },
          dockerfile = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/camdencheek/tree-sitter-dockerfile"
            },
            maintainers = { "@camdencheek" }
          },
          dot = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/rydesun/tree-sitter-dot"
            },
            maintainers = { "@rydesun" }
          },
          doxygen = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/amaanq/tree-sitter-doxygen"
            },
            maintainers = { "@amaanq" }
          },
          dtd = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              location = "dtd",
              url = "https://github.com/tree-sitter-grammars/tree-sitter-xml"
            },
            maintainers = { "@ObserverOfTime" }
          },
          earthfile = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/glehmann/tree-sitter-earthfile"
            },
            maintainers = { "@glehmann" }
          },
          ebnf = {
            experimental = true,
            install_info = {
              files = { "src/parser.c" },
              location = "crates/tree-sitter-ebnf",
              url = "https://github.com/RubixDev/ebnf"
            },
            maintainers = { "@RubixDev" }
          },
          editorconfig = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/ValdezFOmar/tree-sitter-editorconfig"
            },
            maintainers = { "@ValdezFOmar" }
          },
          eds = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/uyha/tree-sitter-eds"
            },
            maintainers = { "@uyha" }
          },
          eex = {
            filetype = "eelixir",
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/connorlay/tree-sitter-eex"
            },
            maintainers = { "@connorlay" }
          },
          elixir = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/elixir-lang/tree-sitter-elixir"
            },
            maintainers = { "@connorlay" }
          },
          elm = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/elm-tooling/tree-sitter-elm"
            },
            maintainers = { "@zweimach" }
          },
          elsa = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/glapa-grossklag/tree-sitter-elsa"
            },
            maintainers = { "@glapa-grossklag", "@amaanq" }
          },
          elvish = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/elves/tree-sitter-elvish"
            },
            maintainers = { "@elves" }
          },
          embedded_template = {
            filetype = "eruby",
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/tree-sitter/tree-sitter-embedded-template"
            }
          },
          enforce = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/simonvic/tree-sitter-enforce"
            },
            maintainers = { "@simonvic" }
          },
          erlang = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/WhatsApp/tree-sitter-erlang"
            },
            maintainers = { "@filmor" }
          },
          facility = {
            filetype = "fsd",
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/FacilityApi/tree-sitter-facility"
            },
            maintainers = { "@bryankenote" }
          },
          faust = {
            filetype = "dsp",
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/khiner/tree-sitter-faust"
            },
            maintainers = { "@khiner" }
          },
          fennel = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              generate_requires_npm = true,
              url = "https://github.com/alexmozaidze/tree-sitter-fennel"
            },
            maintainers = { "@alexmozaidze" }
          },
          fidl = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/google/tree-sitter-fidl"
            },
            maintainers = { "@chaopeng" }
          },
          firrtl = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/amaanq/tree-sitter-firrtl"
            },
            maintainers = { "@amaanq" }
          },
          fish = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/ram02z/tree-sitter-fish"
            },
            maintainers = { "@ram02z" }
          },
          foam = {
            experimental = true,
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/FoamScience/tree-sitter-foam"
            },
            maintainers = { "@FoamScience" }
          },
          forth = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/AlexanderBrevig/tree-sitter-forth"
            },
            maintainers = { "@amaanq" }
          },
          fortran = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/stadelmanma/tree-sitter-fortran"
            },
            maintainers = { "@amaanq" }
          },
          fsh = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/mgramigna/tree-sitter-fsh"
            },
            maintainers = { "@mgramigna" }
          },
          fsharp = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              location = "fsharp",
              url = "https://github.com/ionide/tree-sitter-fsharp"
            },
            maintainers = { "@nsidorenco" }
          },
          func = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/amaanq/tree-sitter-func"
            },
            maintainers = { "@amaanq" }
          },
          fusion = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://gitlab.com/jirgn/tree-sitter-fusion.git"
            },
            maintainers = { "@jirgn" }
          },
          gap = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/gap-system/tree-sitter-gap"
            },
            maintainers = { "@reiniscirpons" },
            readme_name = "GAP system"
          },
          gaptst = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/gap-system/tree-sitter-gaptst"
            },
            maintainers = { "@reiniscirpons" },
            readme_name = "GAP system test files"
          },
          gdscript = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/PrestonKnopp/tree-sitter-gdscript"
            },
            maintainers = { "@PrestonKnopp" },
            readme_name = "Godot (gdscript)"
          },
          gdshader = {
            filetype = "gdshaderinc",
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/GodOfAvacyn/tree-sitter-gdshader"
            },
            maintainers = { "@godofavacyn" }
          },
          git_config = {
            filetype = "gitconfig",
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/the-mikedavis/tree-sitter-git-config"
            },
            maintainers = { "@amaanq" },
            readme_name = "git_config"
          },
          git_rebase = {
            filetype = "gitrebase",
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/the-mikedavis/tree-sitter-git-rebase"
            },
            maintainers = { "@gbprod" }
          },
          gitattributes = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/ObserverOfTime/tree-sitter-gitattributes"
            },
            maintainers = { "@ObserverOfTime" }
          },
          gitcommit = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/gbprod/tree-sitter-gitcommit"
            },
            maintainers = { "@gbprod" }
          },
          gitignore = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/shunsambongi/tree-sitter-gitignore"
            },
            maintainers = { "@theHamsta" }
          },
          gleam = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/gleam-lang/tree-sitter-gleam"
            },
            maintainers = { "@amaanq" }
          },
          glimmer = {
            filetype = "handlebars",
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/ember-tooling/tree-sitter-glimmer"
            },
            maintainers = { "@NullVoxPopuli" },
            readme_name = "Glimmer and Ember"
          },
          glimmer_javascript = {
            filetype = "javascript.glimmer",
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              generate_requires_npm = true,
              url = "https://github.com/NullVoxPopuli/tree-sitter-glimmer-javascript"
            },
            maintainers = { "@NullVoxPopuli" }
          },
          glimmer_typescript = {
            filetype = "typescript.glimmer",
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              generate_requires_npm = true,
              url = "https://github.com/NullVoxPopuli/tree-sitter-glimmer-typescript"
            },
            maintainers = { "@NullVoxPopuli" }
          },
          glsl = {
            install_info = {
              files = { "src/parser.c" },
              generate_requires_npm = true,
              url = "https://github.com/theHamsta/tree-sitter-glsl"
            },
            maintainers = { "@theHamsta" }
          },
          gn = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/amaanq/tree-sitter-gn"
            },
            maintainers = { "@amaanq" },
            readme_name = "GN (Generate Ninja)"
          },
          gnuplot = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/dpezto/tree-sitter-gnuplot"
            },
            maintainers = { "@dpezto" }
          },
          go = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/tree-sitter/tree-sitter-go"
            },
            maintainers = { "@theHamsta", "@WinWisely268" }
          },
          goctl = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/chaozwn/tree-sitter-goctl"
            },
            maintainers = { "@chaozwn" }
          },
          godot_resource = {
            filetype = "gdresource",
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/PrestonKnopp/tree-sitter-godot-resource"
            },
            maintainers = { "@pierpo" },
            readme_name = "Godot Resources (gdresource)"
          },
          gomod = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/camdencheek/tree-sitter-go-mod"
            },
            maintainers = { "@camdencheek" }
          },
          gosum = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/amaanq/tree-sitter-go-sum"
            },
            maintainers = { "@amaanq" }
          },
          gotmpl = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/ngalaiko/tree-sitter-go-template"
            },
            maintainers = { "@qvalentin" }
          },
          gowork = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/omertuc/tree-sitter-go-work"
            },
            maintainers = { "@omertuc" }
          },
          gpg = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/ObserverOfTime/tree-sitter-gpg-config"
            },
            maintainers = { "@ObserverOfTime" }
          },
          graphql = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/bkegley/tree-sitter-graphql"
            },
            maintainers = { "@bkegley" }
          },
          gren = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/MaeBrooks/tree-sitter-gren"
            },
            maintainers = { "@MaeBrooks" }
          },
          groovy = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/murtaza64/tree-sitter-groovy"
            },
            maintainers = { "@murtaza64" }
          },
          gstlaunch = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/theHamsta/tree-sitter-gstlaunch"
            },
            maintainers = { "@theHamsta" }
          },
          hack = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/slackhq/tree-sitter-hack"
            }
          },
          hare = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/amaanq/tree-sitter-hare"
            },
            maintainers = { "@amaanq" }
          },
          haskell = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/tree-sitter/tree-sitter-haskell"
            },
            maintainers = { "@mrcjkb" }
          },
          haskell_persistent = {
            filetype = "haskellpersistent",
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/MercuryTechnologies/tree-sitter-haskell-persistent"
            },
            maintainers = { "@lykahb" }
          },
          hcl = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/MichaHoffmann/tree-sitter-hcl"
            },
            maintainers = { "@MichaHoffmann" }
          },
          heex = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/connorlay/tree-sitter-heex"
            },
            maintainers = { "@connorlay" }
          },
          helm = {
            install_info = {
              files = { "src/parser.c" },
              location = "dialects/helm",
              url = "https://github.com/ngalaiko/tree-sitter-go-template"
            },
            maintainers = { "@qvalentin" }
          },
          hjson = {
            install_info = {
              files = { "src/parser.c" },
              generate_requires_npm = true,
              url = "https://github.com/winston0410/tree-sitter-hjson"
            },
            maintainers = { "@winston0410" }
          },
          hlsl = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              generate_requires_npm = true,
              url = "https://github.com/theHamsta/tree-sitter-hlsl"
            },
            maintainers = { "@theHamsta" }
          },
          hlsplaylist = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/Freed-Wu/tree-sitter-hlsplaylist"
            },
            maintainers = { "@Freed-Wu" }
          },
          hocon = {
            install_info = {
              files = { "src/parser.c" },
              generate_requires_npm = true,
              url = "https://github.com/antosha417/tree-sitter-hocon"
            },
            maintainers = { "@antosha417" }
          },
          hoon = {
            experimental = true,
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/urbit-pilled/tree-sitter-hoon"
            },
            maintainers = { "@urbit-pilled" }
          },
          html = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/tree-sitter/tree-sitter-html"
            },
            maintainers = { "@TravonteD" }
          },
          htmldjango = {
            experimental = true,
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/interdependence/tree-sitter-htmldjango"
            },
            maintainers = { "@ObserverOfTime" }
          },
          http = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/rest-nvim/tree-sitter-http"
            },
            maintainers = { "@amaanq", "@NTBBloodbath" }
          },
          hurl = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/pfeiferj/tree-sitter-hurl"
            },
            maintainers = { "@pfeiferj" }
          },
          hyprlang = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/luckasRanarison/tree-sitter-hyprlang"
            },
            maintainers = { "@luckasRanarison" }
          },
          idl = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/cathaysia/tree-sitter-idl"
            },
            maintainers = { "@cathaysia" }
          },
          idris = {
            filetype = "idris2",
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/kayhide/tree-sitter-idris"
            },
            maintainers = { "@srghma" }
          },
          ini = {
            experimental = true,
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/justinmk/tree-sitter-ini"
            },
            maintainers = { "@theHamsta" }
          },
          inko = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/inko-lang/tree-sitter-inko"
            },
            maintainers = { "@yorickpeterse" }
          },
          ipkg = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/srghma/tree-sitter-ipkg"
            },
            maintainers = { "@srghma" }
          },
          ispc = {
            install_info = {
              files = { "src/parser.c" },
              generate_requires_npm = true,
              url = "https://github.com/fab4100/tree-sitter-ispc"
            },
            maintainers = { "@fab4100" }
          },
          janet_simple = {
            filetype = "janet",
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/sogaiu/tree-sitter-janet-simple"
            },
            maintainers = { "@sogaiu" }
          },
          java = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/tree-sitter/tree-sitter-java"
            },
            maintainers = { "@p00f" }
          },
          javadoc = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/rmuir/tree-sitter-javadoc"
            },
            maintainers = { "@rmuir" }
          },
          javascript = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/tree-sitter/tree-sitter-javascript"
            },
            maintainers = { "@steelsojka" }
          },
          jinja = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              location = "tree-sitter-jinja",
              url = "https://github.com/cathaysia/tree-sitter-jinja"
            },
            maintainers = { "@cathaysia" }
          },
          jinja_inline = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              location = "tree-sitter-jinja_inline",
              url = "https://github.com/cathaysia/tree-sitter-jinja"
            },
            maintainers = { "@cathaysia" }
          },
          jq = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/flurie/tree-sitter-jq"
            },
            maintainers = { "@ObserverOfTime" }
          },
          jsdoc = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/tree-sitter/tree-sitter-jsdoc"
            },
            maintainers = { "@steelsojka" }
          },
          json = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/tree-sitter/tree-sitter-json"
            },
            maintainers = { "@steelsojka" }
          },
          json5 = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/Joakker/tree-sitter-json5"
            },
            maintainers = { "@Joakker" }
          },
          jsonc = {
            install_info = {
              files = { "src/parser.c" },
              generate_requires_npm = true,
              url = "https://gitlab.com/WhyNotHugo/tree-sitter-jsonc.git"
            },
            maintainers = { "@WhyNotHugo" },
            readme_name = "JSON with comments"
          },
          jsonnet = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/sourcegraph/tree-sitter-jsonnet"
            },
            maintainers = { "@nawordar" }
          },
          julia = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/tree-sitter/tree-sitter-julia"
            },
            maintainers = { "@fredrikekre" }
          },
          just = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/IndianBoy42/tree-sitter-just"
            },
            maintainers = { "@Hubro" }
          },
          kcl = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/kcl-lang/tree-sitter-kcl"
            },
            maintainers = { "@bertbaron" }
          },
          kconfig = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/amaanq/tree-sitter-kconfig"
            },
            maintainers = { "@amaanq" }
          },
          kdl = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/amaanq/tree-sitter-kdl"
            },
            maintainers = { "@amaanq" }
          },
          kotlin = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/fwcd/tree-sitter-kotlin"
            },
            maintainers = { "@SalBakraa" }
          },
          koto = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/koto-lang/tree-sitter-koto"
            },
            maintainers = { "@irh" }
          },
          kusto = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/Willem-J-an/tree-sitter-kusto"
            },
            maintainers = { "@Willem-J-an" }
          },
          lalrpop = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/traxys/tree-sitter-lalrpop"
            },
            maintainers = { "@traxys" }
          },
          latex = {
            filetype = "tex",
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              requires_generate_from_grammar = true,
              url = "https://github.com/latex-lsp/tree-sitter-latex"
            },
            maintainers = { "@theHamsta", "@clason" }
          },
          ledger = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/cbarrete/tree-sitter-ledger"
            },
            maintainers = { "@cbarrete" }
          },
          leo = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/r001/tree-sitter-leo"
            },
            maintainers = { "@r001" }
          },
          linkerscript = {
            filetype = "ld",
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/amaanq/tree-sitter-linkerscript"
            },
            maintainers = { "@amaanq" }
          },
          liquid = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/hankthetank27/tree-sitter-liquid"
            },
            maintainers = { "@hankthetank27" }
          },
          liquidsoap = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/savonet/tree-sitter-liquidsoap"
            },
            maintainers = { "@toots" }
          },
          llvm = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/benwilliamgraham/tree-sitter-llvm"
            },
            maintainers = { "@benwilliamgraham" }
          },
          lua = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/MunifTanjim/tree-sitter-lua"
            },
            maintainers = { "@muniftanjim" }
          },
          luadoc = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/amaanq/tree-sitter-luadoc"
            },
            maintainers = { "@amaanq" }
          },
          luap = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/amaanq/tree-sitter-luap"
            },
            maintainers = { "@amaanq" },
            readme_name = "lua patterns"
          },
          luau = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/amaanq/tree-sitter-luau"
            },
            maintainers = { "@amaanq" }
          },
          m68k = {
            filetype = "asm68k",
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/grahambates/tree-sitter-m68k"
            },
            maintainers = { "@grahambates" }
          },
          make = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/alemuller/tree-sitter-make"
            },
            maintainers = { "@lewis6991" }
          },
          markdown = {
            experimental = true,
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              location = "tree-sitter-markdown",
              url = "https://github.com/MDeiml/tree-sitter-markdown"
            },
            maintainers = { "@MDeiml" },
            readme_name = "markdown (basic highlighting)"
          },
          markdown_inline = {
            experimental = true,
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              location = "tree-sitter-markdown-inline",
              url = "https://github.com/MDeiml/tree-sitter-markdown"
            },
            maintainers = { "@MDeiml" },
            readme_name = "markdown_inline (needed for full highlighting)"
          },
          matlab = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/acristoffers/tree-sitter-matlab"
            },
            maintainers = { "@acristoffers" }
          },
          menhir = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/Kerl13/tree-sitter-menhir"
            },
            maintainers = { "@Kerl13" }
          },
          mermaid = {
            experimental = true,
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/monaqa/tree-sitter-mermaid"
            }
          },
          meson = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/Decodetalkers/tree-sitter-meson"
            },
            maintainers = { "@Decodetalkers" }
          },
          mlir = {
            experimental = true,
            install_info = {
              files = { "src/parser.c" },
              requires_generate_from_grammar = true,
              url = "https://github.com/artagnon/tree-sitter-mlir"
            },
            maintainers = { "@artagnon" }
          },
          muttrc = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/neomutt/tree-sitter-muttrc"
            },
            maintainers = { "@Freed-Wu" }
          },
          nasm = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/naclsn/tree-sitter-nasm"
            },
            maintainers = { "@ObserverOfTime" }
          },
          nginx = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/opa-oz/tree-sitter-nginx"
            },
            maintainers = { "@opa-oz" }
          },
          nickel = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/nickel-lang/tree-sitter-nickel"
            }
          },
          nim = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/alaviss/tree-sitter-nim"
            },
            maintainers = { "@aMOPel" }
          },
          nim_format_string = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/aMOPel/tree-sitter-nim-format-string"
            },
            maintainers = { "@aMOPel" }
          },
          ninja = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/alemuller/tree-sitter-ninja"
            },
            maintainers = { "@alemuller" }
          },
          nix = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/cstrahan/tree-sitter-nix"
            },
            maintainers = { "@leo60228" }
          },
          norg = {
            install_info = {
              cxx_standard = "c++14",
              files = { "src/parser.c", "src/scanner.cc" },
              url = "https://github.com/nvim-neorg/tree-sitter-norg",
              use_makefile = true
            },
            maintainers = { "@JoeyGrajciar", "@vhyrro" }
          },
          nqc = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/amaanq/tree-sitter-nqc"
            },
            maintainers = { "@amaanq" }
          },
          nu = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/nushell/tree-sitter-nu"
            },
            maintainers = { "@abhisheksingh0x558" }
          },
          objc = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/amaanq/tree-sitter-objc"
            },
            maintainers = { "@amaanq" }
          },
          objdump = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/ColinKennedy/tree-sitter-objdump"
            },
            maintainers = { "@ColinKennedy" }
          },
          ocaml = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              location = "grammars/ocaml",
              url = "https://github.com/tree-sitter/tree-sitter-ocaml"
            },
            maintainers = { "@undu" }
          },
          ocaml_interface = {
            filetype = "ocamlinterface",
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              location = "grammars/interface",
              url = "https://github.com/tree-sitter/tree-sitter-ocaml"
            },
            maintainers = { "@undu" }
          },
          ocamllex = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              requires_generate_from_grammar = true,
              url = "https://github.com/atom-ocaml/tree-sitter-ocamllex"
            },
            maintainers = { "@undu" }
          },
          odin = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/amaanq/tree-sitter-odin"
            },
            maintainers = { "@amaanq" }
          },
          pascal = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/Isopod/tree-sitter-pascal"
            },
            maintainers = { "@Isopod" }
          },
          passwd = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/ath3/tree-sitter-passwd"
            },
            maintainers = { "@amaanq" }
          },
          pem = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/ObserverOfTime/tree-sitter-pem"
            },
            maintainers = { "@ObserverOfTime" }
          },
          perl = {
            install_info = {
              branch = "release",
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/tree-sitter-perl/tree-sitter-perl"
            },
            maintainers = { "@RabbiVeesh", "@LeoNerd" }
          },
          php = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              location = "php",
              url = "https://github.com/tree-sitter/tree-sitter-php"
            },
            maintainers = { "@tk-shirasaka", "@calebdw" }
          },
          php_only = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              location = "php_only",
              url = "https://github.com/tree-sitter/tree-sitter-php"
            },
            maintainers = { "@tk-shirasaka", "@calebdw" }
          },
          phpdoc = {
            experimental = true,
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              generate_requires_npm = true,
              url = "https://github.com/claytonrcarter/tree-sitter-phpdoc"
            },
            maintainers = { "@mikehaertl" }
          },
          pioasm = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/leo60228/tree-sitter-pioasm"
            },
            maintainers = { "@leo60228" }
          },
          po = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/erasin/tree-sitter-po"
            },
            maintainers = { "@amaanq" }
          },
          pod = {
            install_info = {
              branch = "release",
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/tree-sitter-perl/tree-sitter-pod"
            },
            maintainers = { "@RabbiVeesh", "@LeoNerd" }
          },
          poe_filter = {
            experimental = true,
            filetype = "poefilter",
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/ObserverOfTime/tree-sitter-poe-filter"
            },
            maintainers = { "@ObserverOfTime" },
            readme_name = "Path of Exile item filter"
          },
          pony = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/amaanq/tree-sitter-pony"
            },
            maintainers = { "@amaanq", "@mfelsche" }
          },
          powershell = {
            filetype = "ps1",
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/airbus-cert/tree-sitter-powershell"
            },
            maintainers = { "@L2jLiga" }
          },
          printf = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/ObserverOfTime/tree-sitter-printf"
            },
            maintainers = { "@ObserverOfTime" }
          },
          prisma = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/victorhqc/tree-sitter-prisma"
            },
            maintainers = { "@elianiva" }
          },
          problog = {
            install_info = {
              files = { "src/parser.c" },
              location = "grammars/problog",
              url = "https://github.com/foxyseta/tree-sitter-prolog"
            },
            maintainers = { "@foxyseta" }
          },
          prolog = {
            install_info = {
              files = { "src/parser.c" },
              location = "grammars/prolog",
              url = "https://github.com/foxyseta/tree-sitter-prolog"
            },
            maintainers = { "@foxyseta" }
          },
          promql = {
            install_info = {
              experimental = true,
              files = { "src/parser.c" },
              url = "https://github.com/MichaHoffmann/tree-sitter-promql"
            },
            maintainers = { "@MichaHoffmann" }
          },
          properties = {
            filetype = "jproperties",
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/tree-sitter-grammars/tree-sitter-properties"
            },
            maintainers = { "@ObserverOfTime" }
          },
          proto = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/treywood/tree-sitter-proto"
            },
            maintainers = { "@treywood" }
          },
          prql = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/PRQL/tree-sitter-prql"
            },
            maintainers = { "@matthias-Q" }
          },
          psv = {
            install_info = {
              files = { "src/parser.c" },
              location = "psv",
              url = "https://github.com/amaanq/tree-sitter-csv"
            },
            maintainers = { "@amaanq" }
          },
          pug = {
            experimental = true,
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/zealot128/tree-sitter-pug"
            },
            maintainers = { "@zealot128" }
          },
          puppet = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/amaanq/tree-sitter-puppet"
            },
            maintainers = { "@amaanq" }
          },
          purescript = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/postsolar/tree-sitter-purescript"
            },
            maintainers = { "@postsolar" }
          },
          pymanifest = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/ObserverOfTime/tree-sitter-pymanifest"
            },
            maintainers = { "@ObserverOfTime" },
            readme_name = "PyPA manifest"
          },
          python = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/tree-sitter/tree-sitter-python"
            },
            maintainers = { "@stsewd", "@theHamsta" }
          },
          ql = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/tree-sitter/tree-sitter-ql"
            },
            maintainers = { "@pwntester" }
          },
          qmldir = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/Decodetalkers/tree-sitter-qmldir"
            },
            maintainers = { "@amaanq" }
          },
          qmljs = {
            filetype = "qml",
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/yuja/tree-sitter-qmljs"
            },
            maintainers = { "@Decodetalkers" }
          },
          query = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/nvim-treesitter/tree-sitter-query"
            },
            maintainers = { "@steelsojka" },
            readme_name = "Tree-Sitter query language"
          },
          r = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/r-lib/tree-sitter-r"
            },
            maintainers = { "@ribru17" }
          },
          racket = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/6cdh/tree-sitter-racket"
            }
          },
          ralph = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/alephium/tree-sitter-ralph"
            },
            maintainers = { "@tdroxler" }
          },
          rasi = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/Fymyte/tree-sitter-rasi"
            },
            maintainers = { "@Fymyte" }
          },
          razor = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              generate_requires_npm = true,
              url = "https://github.com/tris203/tree-sitter-razor"
            },
            maintainers = { "@tris203" }
          },
          rbs = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/joker1007/tree-sitter-rbs"
            },
            maintainers = { "@joker1007" }
          },
          re2c = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/amaanq/tree-sitter-re2c"
            },
            maintainers = { "@amaanq" }
          },
          readline = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/ribru17/tree-sitter-readline"
            },
            maintainers = { "@ribru17" }
          },
          regex = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/tree-sitter/tree-sitter-regex"
            },
            maintainers = { "@theHamsta" }
          },
          rego = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/FallenAngel97/tree-sitter-rego"
            },
            maintainers = { "@FallenAngel97" }
          },
          requirements = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/ObserverOfTime/tree-sitter-requirements"
            },
            maintainers = { "@ObserverOfTime" },
            readme_name = "pip requirements"
          },
          rescript = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/rescript-lang/tree-sitter-rescript"
            },
            maintainers = { "@ribru17" }
          },
          rnoweb = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/bamonroe/tree-sitter-rnoweb"
            },
            maintainers = { "@bamonroe" }
          },
          robot = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/Hubro/tree-sitter-robot"
            },
            maintainers = { "@Hubro" }
          },
          robots = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/opa-oz/tree-sitter-robots-txt"
            },
            maintainers = { "@opa-oz" }
          },
          roc = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/faldor20/tree-sitter-roc"
            },
            maintainers = { "@nat-418" }
          },
          ron = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/amaanq/tree-sitter-ron"
            },
            maintainers = { "@amaanq" }
          },
          rst = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/stsewd/tree-sitter-rst"
            },
            maintainers = { "@stsewd" }
          },
          ruby = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/tree-sitter/tree-sitter-ruby"
            },
            maintainers = { "@TravonteD" }
          },
          runescript = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/2004Scape/tree-sitter-runescript"
            },
            maintainers = { "@2004Scape" }
          },
          rust = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/tree-sitter/tree-sitter-rust"
            },
            maintainers = { "@amaanq" }
          },
          scala = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/tree-sitter/tree-sitter-scala"
            },
            maintainers = { "@stevanmilic" }
          },
          scfg = {
            install_info = {
              files = { "src/parser.c" },
              requires_generate_from_grammar = true,
              url = "https://github.com/rockorager/tree-sitter-scfg"
            },
            maintainers = { "@WhyNotHugo" }
          },
          scheme = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/6cdh/tree-sitter-scheme"
            }
          },
          scss = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/serenadeai/tree-sitter-scss"
            },
            maintainers = { "@elianiva" }
          },
          sflog = {
            install_info = {
              files = { "src/parser.c" },
              location = "sflog",
              url = "https://github.com/aheber/tree-sitter-sfapex"
            },
            maintainers = { "@aheber", "@xixiaofinland" }
          },
          slang = {
            experimental = true,
            filetype = "shaderslang",
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              generate_requires_npm = true,
              url = "https://github.com/theHamsta/tree-sitter-slang"
            },
            maintainers = { "@theHamsta" }
          },
          slim = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/theoo/tree-sitter-slim"
            },
            maintainers = { "@theoo" }
          },
          slint = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/slint-ui/tree-sitter-slint"
            },
            maintainers = { "@hunger" }
          },
          smali = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/tree-sitter-grammars/tree-sitter-smali"
            },
            maintainers = { "@amaanq" }
          },
          smithy = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/indoorvivants/tree-sitter-smithy"
            },
            maintainers = { "@amaanq", "@keynmol" }
          },
          snakemake = {
            experimental = true,
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/osthomas/tree-sitter-snakemake"
            },
            maintainer = { "@osthomas" }
          },
          solidity = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/JoranHonig/tree-sitter-solidity"
            },
            maintainers = { "@amaanq" }
          },
          soql = {
            install_info = {
              files = { "src/parser.c" },
              location = "soql",
              url = "https://github.com/aheber/tree-sitter-sfapex"
            },
            maintainers = { "@aheber", "@xixiaofinland" }
          },
          sosl = {
            install_info = {
              files = { "src/parser.c" },
              location = "sosl",
              url = "https://github.com/aheber/tree-sitter-sfapex"
            },
            maintainers = { "@aheber", "@xixiaofinland" }
          },
          sourcepawn = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/nilshelmig/tree-sitter-sourcepawn"
            },
            maintainers = { "@Sarrus1" },
            tier = 3
          },
          sparql = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/GordianDziwis/tree-sitter-sparql"
            },
            maintainers = { "@GordianDziwis" }
          },
          sql = {
            install_info = {
              branch = "gh-pages",
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/derekstride/tree-sitter-sql"
            },
            maintainers = { "@derekstride" }
          },
          squirrel = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/amaanq/tree-sitter-squirrel"
            },
            maintainers = { "@amaanq" }
          },
          ssh_config = {
            filetype = "sshconfig",
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/ObserverOfTime/tree-sitter-ssh-config"
            },
            maintainers = { "@ObserverOfTime" }
          },
          starlark = {
            filetype = "bzl",
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/amaanq/tree-sitter-starlark"
            },
            maintainers = { "@amaanq" }
          },
          strace = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/sigmaSd/tree-sitter-strace"
            },
            maintainers = { "@amaanq" }
          },
          styled = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/mskelton/tree-sitter-styled"
            },
            maintainers = { "@mskelton" }
          },
          supercollider = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/madskjeldgaard/tree-sitter-supercollider"
            },
            maintainers = { "@madskjeldgaard" }
          },
          superhtml = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              location = "tree-sitter-superhtml",
              url = "https://github.com/kristoff-it/superhtml"
            },
            maintainers = { "@rockorager" }
          },
          surface = {
            filetype = "sface",
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/connorlay/tree-sitter-surface"
            },
            maintainers = { "@connorlay" }
          },
          svelte = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/tree-sitter-grammars/tree-sitter-svelte"
            },
            maintainers = { "@amaanq" }
          },
          sway = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/FuelLabs/tree-sitter-sway.git"
            },
            maintainers = { "@ribru17" }
          },
          swift = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              requires_generate_from_grammar = true,
              url = "https://github.com/alex-pinkus/tree-sitter-swift"
            },
            maintainers = { "@alex-pinkus" }
          },
          sxhkdrc = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/RaafatTurki/tree-sitter-sxhkdrc"
            },
            maintainers = { "@RaafatTurki" }
          },
          systemtap = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/ok-ryoko/tree-sitter-systemtap"
            },
            maintainers = { "@ok-ryoko" }
          },
          t32 = {
            filetype = "trace32",
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://gitlab.com/xasc/tree-sitter-t32.git"
            },
            maintainers = { "@xasc" }
          },
          tablegen = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/amaanq/tree-sitter-tablegen"
            },
            maintainers = { "@amaanq" }
          },
          tact = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/tact-lang/tree-sitter-tact"
            },
            maintainers = { "@novusnota" }
          },
          tcl = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/tree-sitter-grammars/tree-sitter-tcl"
            },
            maintainers = { "@lewis6991" }
          },
          teal = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              requires_generate_from_grammar = true,
              url = "https://github.com/euclidianAce/tree-sitter-teal"
            },
            maintainers = { "@euclidianAce" }
          },
          templ = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/vrischmann/tree-sitter-templ"
            },
            maintainers = { "@vrischmann" }
          },
          tera = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/uncenter/tree-sitter-tera"
            },
            maintainers = { "@uncenter" }
          },
          terraform = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              location = "dialects/terraform",
              url = "https://github.com/MichaHoffmann/tree-sitter-hcl"
            },
            maintainers = { "@MichaHoffmann" }
          },
          textproto = {
            filetype = "pbtxt",
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/PorterAtGoogle/tree-sitter-textproto"
            },
            maintainers = { "@Porter" }
          },
          thrift = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/duskmoon314/tree-sitter-thrift"
            },
            maintainers = { "@amaanq", "@duskmoon314" }
          },
          tiger = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/ambroisie/tree-sitter-tiger"
            },
            maintainers = { "@ambroisie" }
          },
          tlaplus = {
            filetype = "tla",
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/tlaplus-community/tree-sitter-tlaplus"
            },
            maintainers = { "@ahelwer", "@susliko" }
          },
          tmux = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/Freed-Wu/tree-sitter-tmux"
            },
            maintainers = { "@Freed-Wu" }
          },
          todotxt = {
            experimental = true,
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/arnarg/tree-sitter-todotxt"
            },
            maintainers = { "@arnarg" }
          },
          toml = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              generate_requires_npm = true,
              url = "https://github.com/tree-sitter-grammars/tree-sitter-toml"
            },
            maintainers = { "@tk-shirasaka" }
          },
          tsv = {
            install_info = {
              files = { "src/parser.c" },
              location = "tsv",
              url = "https://github.com/amaanq/tree-sitter-csv"
            },
            maintainers = { "@amaanq" }
          },
          tsx = {
            filetype = "typescriptreact",
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              generate_requires_npm = true,
              location = "tsx",
              url = "https://github.com/tree-sitter/tree-sitter-typescript"
            },
            maintainers = { "@steelsojka" }
          },
          turtle = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/GordianDziwis/tree-sitter-turtle"
            },
            maintainers = { "@GordianDziwis" }
          },
          twig = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/gbprod/tree-sitter-twig"
            },
            maintainers = { "@gbprod" }
          },
          typescript = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              generate_requires_npm = true,
              location = "typescript",
              url = "https://github.com/tree-sitter/tree-sitter-typescript"
            },
            maintainers = { "@steelsojka" }
          },
          typespec = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/happenslol/tree-sitter-typespec"
            },
            maintainers = { "@happenslol" }
          },
          typoscript = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/Teddytrombone/tree-sitter-typoscript"
            },
            maintainers = { "@Teddytrombone" }
          },
          typst = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/uben0/tree-sitter-typst"
            },
            maintainers = { "@uben0", "@RaafatTurki" }
          },
          udev = {
            filetype = "udevrules",
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/ObserverOfTime/tree-sitter-udev"
            },
            maintainers = { "@ObserverOfTime" }
          },
          ungrammar = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/Philipp-M/tree-sitter-ungrammar"
            },
            maintainers = { "@Philipp-M", "@amaanq" }
          },
          unison = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              requires_generate_from_grammar = true,
              url = "https://github.com/kylegoetz/tree-sitter-unison"
            },
            maintainers = { "@tapegram" }
          },
          usd = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/ColinKennedy/tree-sitter-usd"
            },
            maintainers = { "@ColinKennedy" }
          },
          uxntal = {
            filetype = "tal",
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/amaanq/tree-sitter-uxntal"
            },
            maintainers = { "@amaanq" },
            readme_name = "uxn tal"
          },
          v = {
            filetype = "vlang",
            install_info = {
              files = { "src/parser.c" },
              location = "tree_sitter_v",
              url = "https://github.com/vlang/v-analyzer"
            },
            maintainers = { "@kkharji", "@amaanq" }
          },
          vala = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/vala-lang/tree-sitter-vala"
            },
            maintainers = { "@Prince781" }
          },
          vento = {
            filetype = "vto",
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/ventojs/tree-sitter-vento"
            },
            maintainers = { "@wrapperup", "@oscarotero" }
          },
          verilog = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/gmlarumbe/tree-sitter-systemverilog"
            },
            maintainers = { "@zhangwwpeng" }
          },
          vhdl = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/jpt13653903/tree-sitter-vhdl"
            },
            maintainers = { "@jpt13653903" }
          },
          vhs = {
            filetype = "tape",
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/charmbracelet/tree-sitter-vhs"
            },
            maintainers = { "@caarlos0" }
          },
          vim = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/neovim/tree-sitter-vim"
            },
            maintainers = { "@clason" }
          },
          vimdoc = {
            filetype = "help",
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/neovim/tree-sitter-vimdoc"
            },
            maintainers = { "@clason" }
          },
          vrl = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/belltoy/tree-sitter-vrl"
            },
            maintainers = { "@belltoy" }
          },
          vue = {
            install_info = {
              branch = "main",
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/tree-sitter-grammars/tree-sitter-vue"
            },
            maintainers = { "@WhyNotHugo", "@lucario387" }
          },
          wgsl = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/szebniok/tree-sitter-wgsl"
            },
            maintainers = { "@szebniok" }
          },
          wgsl_bevy = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              generate_requires_npm = true,
              url = "https://github.com/theHamsta/tree-sitter-wgsl-bevy"
            },
            maintainers = { "@theHamsta" }
          },
          wing = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/winglang/tree-sitter-wing"
            },
            maintainers = { "@gshpychka", "@MarkMcCulloh" }
          },
          wit = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/liamwh/tree-sitter-wit"
            },
            maintainers = { "@liamwh" }
          },
          xcompose = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/ObserverOfTime/tree-sitter-xcompose"
            },
            maintainers = { "@ObserverOfTime" }
          },
          xml = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              location = "xml",
              url = "https://github.com/tree-sitter-grammars/tree-sitter-xml"
            },
            maintainers = { "@ObserverOfTime" }
          },
          xresources = {
            filetype = "xdefaults",
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/ValdezFOmar/tree-sitter-xresources"
            },
            maintainers = { "@ValdezFOmar" }
          },
          yaml = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/tree-sitter-grammars/tree-sitter-yaml"
            },
            maintainers = { "@amaanq" }
          },
          yang = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/Hubro/tree-sitter-yang"
            },
            maintainers = { "@Hubro" }
          },
          yuck = {
            install_info = {
              files = { "src/parser.c", "src/scanner.c" },
              url = "https://github.com/Philipp-M/tree-sitter-yuck"
            },
            maintainers = { "@Philipp-M", "@amaanq" }
          },
          zathurarc = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/Freed-Wu/tree-sitter-zathurarc"
            },
            maintainers = { "@Freed-Wu" }
          },
          zig = {
            install_info = {
              files = { "src/parser.c" },
              url = "https://github.com/tree-sitter-grammars/tree-sitter-zig"
            },
            maintainers = { "@amaanq" }
          },
          ziggy = {
            install_info = {
              files = { "src/parser.c" },
              location = "tree-sitter-ziggy",
              url = "https://github.com/kristoff-it/ziggy"
            },
            maintainers = { "@rockorager" }
          },
          ziggy_schema = {
            install_info = {
              files = { "src/parser.c" },
              location = "tree-sitter-ziggy-schema",
              url = "https://github.com/kristoff-it/ziggy"
            },
            maintainers = { "@rockorager" }
          },
          <metatable> = {
            __newindex = <function 1272>
          }
        },
        reset_cache = <function 1273>
      },
      ["nvim-treesitter.query"] = {
        available_query_groups = <function 1274>,
        built_in_query_groups = { "highlights", "locals", "folds", "indents", "injections" },
        collect_group_results = <function 1275>,
        find_best_match = <function 1276>,
        get_capture_matches = <function 1277>,
        get_capture_matches_recursively = <function 1278>,
        get_matches = <function 1279>,
        get_query = <function 1280>,
        has_folds = <function 1281>,
        has_highlights = <function 1282>,
        has_indents = <function 1283>,
        has_injections = <function 1284>,
        has_locals = <function 1285>,
        has_query_files = <function 1286>,
        insert_to_path = <function 1287>,
        invalidate_query_cache = <function 1288>,
        invalidate_query_file = <function 1289>,
        iter_captures = <function 1290>,
        iter_group_results = <function 1291>,
        iter_prepared_matches = <function 1292>
      },
      ["nvim-treesitter.query_predicates"] = true,
      ["nvim-treesitter.shell_command_selectors"] = {
        make_directory_change_for_command = <function 1293>,
        select_compile_command = <function 1294>,
        select_compiler_args = <function 1295>,
        select_download_commands = <function 1296>,
        select_executable = <function 1297>,
        select_install_rm_cmd = <function 1298>,
        select_mkdir_cmd = <function 1299>,
        select_mv_cmd = <function 1300>,
        select_rm_file_cmd = <function 1301>
      },
      ["nvim-treesitter.statusline"] = {
        statusline = <function 1213>
      },
      ["nvim-treesitter.textobjects.attach"] = {
        keymaps_per_submodule = {
          lsp_interop = {},
          move = {},
          swap = {}
        },
        make_attach = <function 1302>,
        make_detach = <function 1303>
      },
      ["nvim-treesitter.textobjects.lsp_interop"] = {
        attach = <function 1304>,
        commands = {
          TSTextobjectPeekDefinitionCode = {
            args = { "-nargs=+", "-complete=custom,nvim_treesitter_textobjects#available_textobjects" },
            run = <function 1305>
          }
        },
        detach = <function 1306>,
        make_preview_location_callback = <function 1307>,
        peek_definition_code = <function 1305>,
        preview_location = <function 1308>
      },
      ["nvim-treesitter.textobjects.move"] = {
        attach = <function 1309>,
        commands = {
          TSTextobjectGotoNextEnd = {
            args = { "-nargs=1", "-complete=custom,nvim_treesitter_textobjects#available_textobjects" },
            run = <function 1310>
          },
          TSTextobjectGotoNextStart = {
            args = { "-nargs=1", "-complete=custom,nvim_treesitter_textobjects#available_textobjects" },
            run = <function 1311>
          },
          TSTextobjectGotoPreviousEnd = {
            args = { "-nargs=1", "-complete=custom,nvim_treesitter_textobjects#available_textobjects" },
            run = <function 1312>

